
Queue_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005230  08005230  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005238  08005238  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004080  20000074  080052b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040f4  080052b4  000240f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f52  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003142  00000000  00000000  00035ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00039138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023175  00000000  00000000  0003b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133da  00000000  00000000  0005e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3adc  00000000  00000000  0007189f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014537b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  001453d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fac 	.word	0x08004fac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004fac 	.word	0x08004fac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b09c      	sub	sp, #112	; 0x70
 80005b0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of SimpleQ */
  osMessageQDef(SimpleQ, 16, uint16_t);
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MX_FREERTOS_Init+0xd8>)
 80005b4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SimpleQHandle = osMessageCreate(osMessageQ(SimpleQ), NULL);
 80005be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 f8c0 	bl	800274a <osMessageCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <MX_FREERTOS_Init+0xdc>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  //Checking if the Queue is working correctly
  if(SimpleQHandle == 0){
 80005d0:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <MX_FREERTOS_Init+0xdc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10d      	bne.n	80005f4 <MX_FREERTOS_Init+0x48>
	 char*str = "Unable to create Queue\n\n";
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <MX_FREERTOS_Init+0xe0>)
 80005da:	66bb      	str	r3, [r7, #104]	; 0x68
	 HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005dc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80005de:	f7ff fdf7 	bl	80001d0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80005ec:	4828      	ldr	r0, [pc, #160]	; (8000690 <MX_FREERTOS_Init+0xe4>)
 80005ee:	f001 fd88 	bl	8002102 <HAL_UART_Transmit>
 80005f2:	e00c      	b.n	800060e <MX_FREERTOS_Init+0x62>
  }
  else{
	  char*str = "Queue Created\n\n";
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_FREERTOS_Init+0xe8>)
 80005f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80005fa:	f7ff fde9 	bl	80001d0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <MX_FREERTOS_Init+0xe4>)
 800060a:	f001 fd7a 	bl	8002102 <HAL_UART_Transmit>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Sender_HPT */
  osThreadDef(Sender_HPT, StartSender_HPT, osPriorityHigh, 0, 128);
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_FREERTOS_Init+0xec>)
 8000610:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sender_HPTHandle = osThreadCreate(osThread(Sender_HPT), NULL);
 8000622:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 f82e 	bl	800268a <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <MX_FREERTOS_Init+0xf0>)
 8000632:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sender_LPT */
  osThreadDef(Sender_LPT, StartSender_LPT, osPriorityNormal, 0, 128);
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_FREERTOS_Init+0xf4>)
 8000636:	f107 0420 	add.w	r4, r7, #32
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sender_LPTHandle = osThreadCreate(osThread(Sender_LPT), NULL);
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f81b 	bl	800268a <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_FREERTOS_Init+0xf8>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of Receiver */
  osThreadDef(Receiver, StartReceiver, osPriorityLow, 0, 128);
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_FREERTOS_Init+0xfc>)
 800065c:	1d3c      	adds	r4, r7, #4
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverHandle = osThreadCreate(osThread(Receiver), NULL);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f80a 	bl	800268a <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_FREERTOS_Init+0x100>)
 800067a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800067c:	bf00      	nop
 800067e:	3770      	adds	r7, #112	; 0x70
 8000680:	46bd      	mov	sp, r7
 8000682:	bdb0      	pop	{r4, r5, r7, pc}
 8000684:	08005014 	.word	0x08005014
 8000688:	20004050 	.word	0x20004050
 800068c:	08004fe8 	.word	0x08004fe8
 8000690:	2000409c 	.word	0x2000409c
 8000694:	08005004 	.word	0x08005004
 8000698:	08005024 	.word	0x08005024
 800069c:	20004044 	.word	0x20004044
 80006a0:	08005040 	.word	0x08005040
 80006a4:	2000404c 	.word	0x2000404c
 80006a8:	0800505c 	.word	0x0800505c
 80006ac:	20004048 	.word	0x20004048

080006b0 <StartSender_HPT>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender_HPT */
void StartSender_HPT(void const * argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender_HPT */
	int i = 222;
 80006b8:	23de      	movs	r3, #222	; 0xde
 80006ba:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 80006bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c0:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  char*str = "Entered SENDER HPT Task\n Sendig a number to the queue\n\n";
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <StartSender_HPT+0x68>)
 80006c4:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80006c6:	6938      	ldr	r0, [r7, #16]
 80006c8:	f7ff fd82 	bl	80001d0 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	6939      	ldr	r1, [r7, #16]
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <StartSender_HPT+0x6c>)
 80006d8:	f001 fd13 	bl	8002102 <HAL_UART_Transmit>

	  if (xQueueSend(SimpleQHandle, &i, portMAX_DELAY) == pdPASS){ //Send the value to the Queue and check if it has been received using the pdPASS mnemonic
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <StartSender_HPT+0x70>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f107 0108 	add.w	r1, r7, #8
 80006e4:	2300      	movs	r3, #0
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	f002 fa45 	bl	8002b78 <xQueueGenericSend>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d10c      	bne.n	800070e <StartSender_HPT+0x5e>
		  char*str2 = "Successfully sent the number\n Leaving SENDER HPT\n\n";
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <StartSender_HPT+0x74>)
 80006f6:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), HAL_MAX_DELAY);
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f7ff fd69 	bl	80001d0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	68f9      	ldr	r1, [r7, #12]
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <StartSender_HPT+0x6c>)
 800070a:	f001 fcfa 	bl	8002102 <HAL_UART_Transmit>
	  }
    osDelay(TickDelay);
 800070e:	6978      	ldr	r0, [r7, #20]
 8000710:	f002 f807 	bl	8002722 <osDelay>
  {
 8000714:	e7d5      	b.n	80006c2 <StartSender_HPT+0x12>
 8000716:	bf00      	nop
 8000718:	08005078 	.word	0x08005078
 800071c:	2000409c 	.word	0x2000409c
 8000720:	20004050 	.word	0x20004050
 8000724:	080050b0 	.word	0x080050b0

08000728 <StartSender_LPT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender_LPT */
void StartSender_LPT(void const * argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender_LPT */
	int s = 111;
 8000730:	236f      	movs	r3, #111	; 0x6f
 8000732:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  char*str = "Entered SENDER LPT Task\n Sendig a number to the queue\n\n";
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <StartSender_LPT+0x60>)
 800073c:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800073e:	6938      	ldr	r0, [r7, #16]
 8000740:	f7ff fd46 	bl	80001d0 <strlen>
 8000744:	4603      	mov	r3, r0
 8000746:	b29a      	uxth	r2, r3
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	6939      	ldr	r1, [r7, #16]
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <StartSender_LPT+0x64>)
 8000750:	f001 fcd7 	bl	8002102 <HAL_UART_Transmit>

	 xQueueSend(SimpleQHandle, &s, portMAX_DELAY);
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <StartSender_LPT+0x68>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	f107 0108 	add.w	r1, r7, #8
 800075c:	2300      	movs	r3, #0
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	f002 fa09 	bl	8002b78 <xQueueGenericSend>

	 char*str2 = "Successfully sent the number\n Leaving SENDER LPT\n\n";
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <StartSender_LPT+0x6c>)
 8000768:	60fb      	str	r3, [r7, #12]
	 HAL_UART_Transmit(&huart2, (uint8_t*)str2, strlen(str2), HAL_MAX_DELAY);
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f7ff fd30 	bl	80001d0 <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	68f9      	ldr	r1, [r7, #12]
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <StartSender_LPT+0x64>)
 800077c:	f001 fcc1 	bl	8002102 <HAL_UART_Transmit>

    osDelay(TickDelay);
 8000780:	6978      	ldr	r0, [r7, #20]
 8000782:	f001 ffce 	bl	8002722 <osDelay>
  {
 8000786:	e7d8      	b.n	800073a <StartSender_LPT+0x12>
 8000788:	080050e4 	.word	0x080050e4
 800078c:	2000409c 	.word	0x2000409c
 8000790:	20004050 	.word	0x20004050
 8000794:	0800511c 	.word	0x0800511c

08000798 <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void const * argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09e      	sub	sp, #120	; 0x78
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiver */
	int received = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t TickDelay = pdMS_TO_TICKS(5000);
 80007a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80007a8:	677b      	str	r3, [r7, #116]	; 0x74
  /* Infinite loop */
  for(;;)
  {
	  char str[100];
	  strcpy (str, "Entered RECEIVER task\n About to receive a number from the queue\n");
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <StartReceiver+0x9c>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	4611      	mov	r1, r2
 80007b4:	2341      	movs	r3, #65	; 0x41
 80007b6:	461a      	mov	r2, r3
 80007b8:	f003 ffc2 	bl	8004740 <memcpy>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd05 	bl	80001d0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f107 010c 	add.w	r1, r7, #12
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	4819      	ldr	r0, [pc, #100]	; (8000838 <StartReceiver+0xa0>)
 80007d4:	f001 fc95 	bl	8002102 <HAL_UART_Transmit>

	  if(xQueueReceive(SimpleQHandle, &received, portMAX_DELAY) != pdTRUE){
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <StartReceiver+0xa4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fac5 	bl	8002d74 <xQueueReceive>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d007      	beq.n	8000800 <StartReceiver+0x68>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"Error in queue", 14, 1000);
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	220e      	movs	r2, #14
 80007f6:	4912      	ldr	r1, [pc, #72]	; (8000840 <StartReceiver+0xa8>)
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <StartReceiver+0xa0>)
 80007fa:	f001 fc82 	bl	8002102 <HAL_UART_Transmit>
 80007fe:	e014      	b.n	800082a <StartReceiver+0x92>
	  }
	  else{
		  sprintf(str, "Successfully received the number %d\n Leaving Receiver\n\n", received);
 8000800:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	490f      	ldr	r1, [pc, #60]	; (8000844 <StartReceiver+0xac>)
 8000808:	4618      	mov	r0, r3
 800080a:	f003 ffaf 	bl	800476c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fcdc 	bl	80001d0 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	f107 010c 	add.w	r1, r7, #12
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <StartReceiver+0xa0>)
 8000826:	f001 fc6c 	bl	8002102 <HAL_UART_Transmit>
	  }
    osDelay(TickDelay);
 800082a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800082c:	f001 ff79 	bl	8002722 <osDelay>
  {
 8000830:	e7bb      	b.n	80007aa <StartReceiver+0x12>
 8000832:	bf00      	nop
 8000834:	08005150 	.word	0x08005150
 8000838:	2000409c 	.word	0x2000409c
 800083c:	20004050 	.word	0x20004050
 8000840:	08005194 	.word	0x08005194
 8000844:	080051a4 	.word	0x080051a4

08000848 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_GPIO_Init+0x30>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MX_GPIO_Init+0x30>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_GPIO_Init+0x30>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fa0a 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f80a 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f7ff ffde 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088c:	f000 f968 	bl	8000b60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000890:	f7ff fe8c 	bl	80005ac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000894:	f001 fef2 	bl	800267c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x1c>
	...

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 ff56 	bl	800475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <SystemClock_Config+0xb4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <SystemClock_Config+0xb4>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <SystemClock_Config+0xb4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <SystemClock_Config+0xb8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <SystemClock_Config+0xb8>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <SystemClock_Config+0xb8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fc83 	bl	8001218 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000918:	f000 f830 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fee6 	bl	8001708 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000942:	f000 f81b 	bl	800097c <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096a:	f000 f9b7 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40001000 	.word	0x40001000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_MspInit+0x54>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a11      	ldr	r2, [pc, #68]	; (80009dc <HAL_MspInit+0x54>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x54>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_MspInit+0x54>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 fa5d 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	2036      	movs	r0, #54	; 0x36
 80009f6:	f000 fa49 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009fa:	2036      	movs	r0, #54	; 0x36
 80009fc:	f000 fa62 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_InitTick+0xa0>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_InitTick+0xa0>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_InitTick+0xa0>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f83e 	bl	8001aa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a2c:	f001 f814 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8000a30:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	0c9b      	lsrs	r3, r3, #18
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <HAL_InitTick+0xac>)
 8000a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a62:	f001 f853 	bl	8001b0c <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d104      	bne.n	8000a76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a6e:	f001 f8a7 	bl	8001bc0 <HAL_TIM_Base_Start_IT>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3730      	adds	r7, #48	; 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	20004054 	.word	0x20004054
 8000a8c:	40001000 	.word	0x40001000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM6_DAC_IRQHandler+0x10>)
 8000ac2:	f001 f8ed 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20004054 	.word	0x20004054

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f003 fdf4 	bl	80046ec <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20020000 	.word	0x20020000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	200002e4 	.word	0x200002e4
 8000b38:	200040f8 	.word	0x200040f8

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART2_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b98:	f001 fa66 	bl	8002068 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f7ff feeb 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000409c 	.word	0x2000409c
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0x84>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_UART_MspInit+0x8c>)
 8000c2a:	f000 f959 	bl	8000ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ff65 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f003 fd41 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fe01 	bl	800087c <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c88:	08005240 	.word	0x08005240
  ldr r2, =_sbss
 8000c8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c90:	200040f4 	.word	0x200040f4

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fe8a 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe5c 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200040e0 	.word	0x200040e0

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200040e0 	.word	0x200040e0

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e16b      	b.n	80011d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 815a 	bne.w	80011ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80b4 	beq.w	80011ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b60      	ldr	r3, [pc, #384]	; (80011ec <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a5f      	ldr	r2, [pc, #380]	; (80011ec <HAL_GPIO_Init+0x30c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <HAL_GPIO_Init+0x310>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x314>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x318>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x31c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x320>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x324>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x328>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x32c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x330>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x20a>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x310>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_GPIO_Init+0x334>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae90 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e264      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d075      	beq.n	8001322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d00c      	beq.n	800125c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4ba0      	ldr	r3, [pc, #640]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d112      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800125a:	d10b      	bne.n	8001274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4b99      	ldr	r3, [pc, #612]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d05b      	beq.n	8001320 <HAL_RCC_OscConfig+0x108>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d157      	bne.n	8001320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e23f      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x74>
 800127e:	4b91      	ldr	r3, [pc, #580]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a90      	ldr	r2, [pc, #576]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e01d      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b8b      	ldr	r3, [pc, #556]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a8a      	ldr	r2, [pc, #552]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0xb0>
 80012b0:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a83      	ldr	r2, [pc, #524]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a80      	ldr	r2, [pc, #512]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fd18 	bl	8000d04 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fd14 	bl	8000d04 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e204      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012f6:	e014      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fd04 	bl	8000d04 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fd00 	bl	8000d04 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1f0      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	4b6c      	ldr	r3, [pc, #432]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0xe8>
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d063      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	4b65      	ldr	r3, [pc, #404]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d11c      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d116      	bne.n	8001380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e1c4      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4952      	ldr	r1, [pc, #328]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	e03a      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_RCC_OscConfig+0x2b0>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fcb9 	bl	8000d04 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fcb5 	bl	8000d04 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1a5      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4940      	ldr	r1, [pc, #256]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e015      	b.n	80013f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x2b0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc98 	bl	8000d04 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc94 	bl	8000d04 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e184      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d030      	beq.n	8001464 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d016      	beq.n	8001438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_RCC_OscConfig+0x2b4>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fc78 	bl	8000d04 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fc74 	bl	8000d04 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e164      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x200>
 8001436:	e015      	b.n	8001464 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x2b4>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc61 	bl	8000d04 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fc5d 	bl	8000d04 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e14d      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a0 	beq.w	80015b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d121      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fc23 	bl	8000d04 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e011      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ce>
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470000 	.word	0x42470000
 80014cc:	42470e80 	.word	0x42470e80
 80014d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7ff fc16 	bl	8000d04 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e106      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b85      	ldr	r3, [pc, #532]	; (80016fc <HAL_RCC_OscConfig+0x4e4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x2f0>
 80014fa:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a80      	ldr	r2, [pc, #512]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	e01c      	b.n	8001542 <HAL_RCC_OscConfig+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x312>
 8001510:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a7a      	ldr	r2, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	4b78      	ldr	r3, [pc, #480]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a77      	ldr	r2, [pc, #476]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0x32a>
 800152a:	4b75      	ldr	r3, [pc, #468]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a74      	ldr	r2, [pc, #464]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b72      	ldr	r3, [pc, #456]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a71      	ldr	r2, [pc, #452]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d015      	beq.n	8001576 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fbdb 	bl	8000d04 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff fbd7 	bl	8000d04 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0c5      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	4b65      	ldr	r3, [pc, #404]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ee      	beq.n	8001552 <HAL_RCC_OscConfig+0x33a>
 8001574:	e014      	b.n	80015a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fbc5 	bl	8000d04 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fbc1 	bl	8000d04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0af      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ee      	bne.n	800157e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a6:	4b56      	ldr	r3, [pc, #344]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a55      	ldr	r2, [pc, #340]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 809b 	beq.w	80016f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d05c      	beq.n	8001682 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d141      	bne.n	8001654 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x4ec>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb95 	bl	8000d04 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff fb91 	bl	8000d04 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e081      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f0:	4b43      	ldr	r3, [pc, #268]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69da      	ldr	r2, [r3, #28]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	019b      	lsls	r3, r3, #6
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	061b      	lsls	r3, r3, #24
 8001620:	4937      	ldr	r1, [pc, #220]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_RCC_OscConfig+0x4ec>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb6a 	bl	8000d04 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb66 	bl	8000d04 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e056      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x41c>
 8001652:	e04e      	b.n	80016f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb4f 	bl	8000d04 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e03f      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x44a>
 8001680:	e037      	b.n	80016f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e032      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d028      	beq.n	80016ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d121      	bne.n	80016ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d11a      	bne.n	80016ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016be:	4013      	ands	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d111      	bne.n	80016ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	3b01      	subs	r3, #1
 80016d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40007000 	.word	0x40007000
 8001700:	40023800 	.word	0x40023800
 8001704:	42470060 	.word	0x42470060

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0cc      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d90c      	bls.n	8001744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800177e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d044      	beq.n	8001828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d119      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e067      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4934      	ldr	r1, [pc, #208]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fa84 	bl	8000d04 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fa80 	bl	8000d04 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e04f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20c      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f896 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00
 80018c4:	40023800 	.word	0x40023800
 80018c8:	080051e4 	.word	0x080051e4
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018da:	2100      	movs	r1, #0
 80018dc:	6079      	str	r1, [r7, #4]
 80018de:	2100      	movs	r1, #0
 80018e0:	60f9      	str	r1, [r7, #12]
 80018e2:	2100      	movs	r1, #0
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018e6:	2100      	movs	r1, #0
 80018e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ea:	4952      	ldr	r1, [pc, #328]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ec:	6889      	ldr	r1, [r1, #8]
 80018ee:	f001 010c 	and.w	r1, r1, #12
 80018f2:	2908      	cmp	r1, #8
 80018f4:	d00d      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x3e>
 80018f6:	2908      	cmp	r1, #8
 80018f8:	f200 8094 	bhi.w	8001a24 <HAL_RCC_GetSysClockFreq+0x150>
 80018fc:	2900      	cmp	r1, #0
 80018fe:	d002      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x32>
 8001900:	2904      	cmp	r1, #4
 8001902:	d003      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x38>
 8001904:	e08e      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001906:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x164>)
 8001908:	60bb      	str	r3, [r7, #8]
       break;
 800190a:	e08e      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x168>)
 800190e:	60bb      	str	r3, [r7, #8]
      break;
 8001910:	e08b      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001912:	4948      	ldr	r1, [pc, #288]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001914:	6849      	ldr	r1, [r1, #4]
 8001916:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800191a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191c:	4945      	ldr	r1, [pc, #276]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x160>)
 800191e:	6849      	ldr	r1, [r1, #4]
 8001920:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001924:	2900      	cmp	r1, #0
 8001926:	d024      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4942      	ldr	r1, [pc, #264]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x160>)
 800192a:	6849      	ldr	r1, [r1, #4]
 800192c:	0989      	lsrs	r1, r1, #6
 800192e:	4608      	mov	r0, r1
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001938:	f04f 0500 	mov.w	r5, #0
 800193c:	ea00 0204 	and.w	r2, r0, r4
 8001940:	ea01 0305 	and.w	r3, r1, r5
 8001944:	493d      	ldr	r1, [pc, #244]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x168>)
 8001946:	fb01 f003 	mul.w	r0, r1, r3
 800194a:	2100      	movs	r1, #0
 800194c:	fb01 f102 	mul.w	r1, r1, r2
 8001950:	1844      	adds	r4, r0, r1
 8001952:	493a      	ldr	r1, [pc, #232]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x168>)
 8001954:	fba2 0101 	umull	r0, r1, r2, r1
 8001958:	1863      	adds	r3, r4, r1
 800195a:	4619      	mov	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f7fe fc8c 	bl	8000280 <__aeabi_uldivmod>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4613      	mov	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e04a      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	461a      	mov	r2, r3
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	ea02 0400 	and.w	r4, r2, r0
 800198a:	ea03 0501 	and.w	r5, r3, r1
 800198e:	4620      	mov	r0, r4
 8001990:	4629      	mov	r1, r5
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	014b      	lsls	r3, r1, #5
 800199c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a0:	0142      	lsls	r2, r0, #5
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	1b00      	subs	r0, r0, r4
 80019a8:	eb61 0105 	sbc.w	r1, r1, r5
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	018b      	lsls	r3, r1, #6
 80019b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019ba:	0182      	lsls	r2, r0, #6
 80019bc:	1a12      	subs	r2, r2, r0
 80019be:	eb63 0301 	sbc.w	r3, r3, r1
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	00d9      	lsls	r1, r3, #3
 80019cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d0:	00d0      	lsls	r0, r2, #3
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	1912      	adds	r2, r2, r4
 80019d8:	eb45 0303 	adc.w	r3, r5, r3
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0299      	lsls	r1, r3, #10
 80019e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019ea:	0290      	lsls	r0, r2, #10
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f7fe fc40 	bl	8000280 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	60bb      	str	r3, [r7, #8]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a26:	60bb      	str	r3, [r7, #8]
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bdb0      	pop	{r4, r5, r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	017d7840 	.word	0x017d7840

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a5c:	f7ff fff0 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0a9b      	lsrs	r3, r3, #10
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	080051f4 	.word	0x080051f4

08001a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a84:	f7ff ffdc 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0b5b      	lsrs	r3, r3, #13
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	080051f4 	.word	0x080051f4

08001aa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_RCC_GetClockConfig+0x60>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0207 	and.w	r2, r3, #7
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e041      	b.n	8001ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f839 	bl	8001baa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f000 f9d8 	bl	8001f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d001      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e04e      	b.n	8001c76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d022      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d01d      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d018      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d010      	beq.n	8001c74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c62:	e007      	b.n	8001c74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	40000c00 	.word	0x40000c00
 8001c94:	40010400 	.word	0x40010400
 8001c98:	40014000 	.word	0x40014000
 8001c9c:	40001800 	.word	0x40001800

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8ee 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8e0 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8f1 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c4 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8b6 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8c7 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89a 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f88c 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f89d 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0210 	mvn.w	r2, #16
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f870 	bl	8001ec4 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f862 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f873 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe fd9a 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f902 	bl	8002054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f838 	bl	8001eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8cc 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <TIM_Base_SetConfig+0x118>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3c      	ldr	r2, [pc, #240]	; (800201c <TIM_Base_SetConfig+0x11c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <TIM_Base_SetConfig+0x120>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3a      	ldr	r2, [pc, #232]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d027      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <TIM_Base_SetConfig+0x118>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d023      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <TIM_Base_SetConfig+0x11c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <TIM_Base_SetConfig+0x120>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d017      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <TIM_Base_SetConfig+0x128>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <TIM_Base_SetConfig+0x12c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <TIM_Base_SetConfig+0x130>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <TIM_Base_SetConfig+0x134>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <TIM_Base_SetConfig+0x138>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <TIM_Base_SetConfig+0x13c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0xf8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d103      	bne.n	8002000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	615a      	str	r2, [r3, #20]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40010400 	.word	0x40010400
 8002028:	40014000 	.word	0x40014000
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800
 8002034:	40001800 	.word	0x40001800
 8002038:	40001c00 	.word	0x40001c00
 800203c:	40002000 	.word	0x40002000

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e03f      	b.n	80020fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fd90 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f905 	bl	80022bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b08a      	sub	sp, #40	; 0x28
 8002106:	af02      	add	r7, sp, #8
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	d17c      	bne.n	800221c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_UART_Transmit+0x2c>
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e075      	b.n	800221e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_UART_Transmit+0x3e>
 800213c:	2302      	movs	r3, #2
 800213e:	e06e      	b.n	800221e <HAL_UART_Transmit+0x11c>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002156:	f7fe fdd5 	bl	8000d04 <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	88fa      	ldrh	r2, [r7, #6]
 8002160:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002170:	d108      	bne.n	8002184 <HAL_UART_Transmit+0x82>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d104      	bne.n	8002184 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	e003      	b.n	800218c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002194:	e02a      	b.n	80021ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f840 	bl	8002226 <UART_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e036      	b.n	800221e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10b      	bne.n	80021ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	3302      	adds	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e007      	b.n	80021de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1cf      	bne.n	8002196 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f810 	bl	8002226 <UART_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e006      	b.n	800221e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e000      	b.n	800221e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800221c:	2302      	movs	r3, #2
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002236:	e02c      	b.n	8002292 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d028      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <UART_WaitOnFlagUntilTimeout+0x30>
 8002246:	f7fe fd5d 	bl	8000d04 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	429a      	cmp	r2, r3
 8002254:	d21d      	bcs.n	8002292 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002264:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4013      	ands	r3, r2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d0c3      	beq.n	8002238 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c0:	b09f      	sub	sp, #124	; 0x7c
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	68d9      	ldr	r1, [r3, #12]
 80022d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	ea40 0301 	orr.w	r3, r0, r1
 80022dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002300:	f021 010c 	bic.w	r1, r1, #12
 8002304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230a:	430b      	orrs	r3, r1
 800230c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800230e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231a:	6999      	ldr	r1, [r3, #24]
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	ea40 0301 	orr.w	r3, r0, r1
 8002324:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4bc5      	ldr	r3, [pc, #788]	; (8002640 <UART_SetConfig+0x384>)
 800232c:	429a      	cmp	r2, r3
 800232e:	d004      	beq.n	800233a <UART_SetConfig+0x7e>
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4bc3      	ldr	r3, [pc, #780]	; (8002644 <UART_SetConfig+0x388>)
 8002336:	429a      	cmp	r2, r3
 8002338:	d103      	bne.n	8002342 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800233a:	f7ff fba1 	bl	8001a80 <HAL_RCC_GetPCLK2Freq>
 800233e:	6778      	str	r0, [r7, #116]	; 0x74
 8002340:	e002      	b.n	8002348 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002342:	f7ff fb89 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002346:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002350:	f040 80b6 	bne.w	80024c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002356:	461c      	mov	r4, r3
 8002358:	f04f 0500 	mov.w	r5, #0
 800235c:	4622      	mov	r2, r4
 800235e:	462b      	mov	r3, r5
 8002360:	1891      	adds	r1, r2, r2
 8002362:	6439      	str	r1, [r7, #64]	; 0x40
 8002364:	415b      	adcs	r3, r3
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
 8002368:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800236c:	1912      	adds	r2, r2, r4
 800236e:	eb45 0303 	adc.w	r3, r5, r3
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	00d9      	lsls	r1, r3, #3
 800237c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002380:	00d0      	lsls	r0, r2, #3
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	1911      	adds	r1, r2, r4
 8002388:	6639      	str	r1, [r7, #96]	; 0x60
 800238a:	416b      	adcs	r3, r5
 800238c:	667b      	str	r3, [r7, #100]	; 0x64
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	1891      	adds	r1, r2, r2
 800239a:	63b9      	str	r1, [r7, #56]	; 0x38
 800239c:	415b      	adcs	r3, r3
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023a8:	f7fd ff6a 	bl	8000280 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4ba5      	ldr	r3, [pc, #660]	; (8002648 <UART_SetConfig+0x38c>)
 80023b2:	fba3 2302 	umull	r2, r3, r3, r2
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	011e      	lsls	r6, r3, #4
 80023ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023bc:	461c      	mov	r4, r3
 80023be:	f04f 0500 	mov.w	r5, #0
 80023c2:	4622      	mov	r2, r4
 80023c4:	462b      	mov	r3, r5
 80023c6:	1891      	adds	r1, r2, r2
 80023c8:	6339      	str	r1, [r7, #48]	; 0x30
 80023ca:	415b      	adcs	r3, r3
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
 80023ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023d2:	1912      	adds	r2, r2, r4
 80023d4:	eb45 0303 	adc.w	r3, r5, r3
 80023d8:	f04f 0000 	mov.w	r0, #0
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	00d9      	lsls	r1, r3, #3
 80023e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023e6:	00d0      	lsls	r0, r2, #3
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	1911      	adds	r1, r2, r4
 80023ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80023f0:	416b      	adcs	r3, r5
 80023f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	461a      	mov	r2, r3
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	1891      	adds	r1, r2, r2
 8002400:	62b9      	str	r1, [r7, #40]	; 0x28
 8002402:	415b      	adcs	r3, r3
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800240a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800240e:	f7fd ff37 	bl	8000280 <__aeabi_uldivmod>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4b8c      	ldr	r3, [pc, #560]	; (8002648 <UART_SetConfig+0x38c>)
 8002418:	fba3 1302 	umull	r1, r3, r3, r2
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	2164      	movs	r1, #100	; 0x64
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	3332      	adds	r3, #50	; 0x32
 800242a:	4a87      	ldr	r2, [pc, #540]	; (8002648 <UART_SetConfig+0x38c>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002438:	441e      	add	r6, r3
 800243a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243c:	4618      	mov	r0, r3
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	1894      	adds	r4, r2, r2
 8002448:	623c      	str	r4, [r7, #32]
 800244a:	415b      	adcs	r3, r3
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002452:	1812      	adds	r2, r2, r0
 8002454:	eb41 0303 	adc.w	r3, r1, r3
 8002458:	f04f 0400 	mov.w	r4, #0
 800245c:	f04f 0500 	mov.w	r5, #0
 8002460:	00dd      	lsls	r5, r3, #3
 8002462:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002466:	00d4      	lsls	r4, r2, #3
 8002468:	4622      	mov	r2, r4
 800246a:	462b      	mov	r3, r5
 800246c:	1814      	adds	r4, r2, r0
 800246e:	653c      	str	r4, [r7, #80]	; 0x50
 8002470:	414b      	adcs	r3, r1
 8002472:	657b      	str	r3, [r7, #84]	; 0x54
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	1891      	adds	r1, r2, r2
 8002480:	61b9      	str	r1, [r7, #24]
 8002482:	415b      	adcs	r3, r3
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800248a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800248e:	f7fd fef7 	bl	8000280 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <UART_SetConfig+0x38c>)
 8002498:	fba3 1302 	umull	r1, r3, r3, r2
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	2164      	movs	r1, #100	; 0x64
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	3332      	adds	r3, #50	; 0x32
 80024aa:	4a67      	ldr	r2, [pc, #412]	; (8002648 <UART_SetConfig+0x38c>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	f003 0207 	and.w	r2, r3, #7
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4432      	add	r2, r6
 80024bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024be:	e0b9      	b.n	8002634 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c2:	461c      	mov	r4, r3
 80024c4:	f04f 0500 	mov.w	r5, #0
 80024c8:	4622      	mov	r2, r4
 80024ca:	462b      	mov	r3, r5
 80024cc:	1891      	adds	r1, r2, r2
 80024ce:	6139      	str	r1, [r7, #16]
 80024d0:	415b      	adcs	r3, r3
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024d8:	1912      	adds	r2, r2, r4
 80024da:	eb45 0303 	adc.w	r3, r5, r3
 80024de:	f04f 0000 	mov.w	r0, #0
 80024e2:	f04f 0100 	mov.w	r1, #0
 80024e6:	00d9      	lsls	r1, r3, #3
 80024e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ec:	00d0      	lsls	r0, r2, #3
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	eb12 0804 	adds.w	r8, r2, r4
 80024f6:	eb43 0905 	adc.w	r9, r3, r5
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	008b      	lsls	r3, r1, #2
 800250e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002512:	0082      	lsls	r2, r0, #2
 8002514:	4640      	mov	r0, r8
 8002516:	4649      	mov	r1, r9
 8002518:	f7fd feb2 	bl	8000280 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4b49      	ldr	r3, [pc, #292]	; (8002648 <UART_SetConfig+0x38c>)
 8002522:	fba3 2302 	umull	r2, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	011e      	lsls	r6, r3, #4
 800252a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252c:	4618      	mov	r0, r3
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	1894      	adds	r4, r2, r2
 8002538:	60bc      	str	r4, [r7, #8]
 800253a:	415b      	adcs	r3, r3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002542:	1812      	adds	r2, r2, r0
 8002544:	eb41 0303 	adc.w	r3, r1, r3
 8002548:	f04f 0400 	mov.w	r4, #0
 800254c:	f04f 0500 	mov.w	r5, #0
 8002550:	00dd      	lsls	r5, r3, #3
 8002552:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002556:	00d4      	lsls	r4, r2, #3
 8002558:	4622      	mov	r2, r4
 800255a:	462b      	mov	r3, r5
 800255c:	1814      	adds	r4, r2, r0
 800255e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002560:	414b      	adcs	r3, r1
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	008b      	lsls	r3, r1, #2
 8002578:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800257c:	0082      	lsls	r2, r0, #2
 800257e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002582:	f7fd fe7d 	bl	8000280 <__aeabi_uldivmod>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <UART_SetConfig+0x38c>)
 800258c:	fba3 1302 	umull	r1, r3, r3, r2
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	2164      	movs	r1, #100	; 0x64
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	3332      	adds	r3, #50	; 0x32
 800259e:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <UART_SetConfig+0x38c>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	441e      	add	r6, r3
 80025ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ae:	4618      	mov	r0, r3
 80025b0:	f04f 0100 	mov.w	r1, #0
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	1894      	adds	r4, r2, r2
 80025ba:	603c      	str	r4, [r7, #0]
 80025bc:	415b      	adcs	r3, r3
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c4:	1812      	adds	r2, r2, r0
 80025c6:	eb41 0303 	adc.w	r3, r1, r3
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	f04f 0500 	mov.w	r5, #0
 80025d2:	00dd      	lsls	r5, r3, #3
 80025d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025d8:	00d4      	lsls	r4, r2, #3
 80025da:	4622      	mov	r2, r4
 80025dc:	462b      	mov	r3, r5
 80025de:	eb12 0a00 	adds.w	sl, r2, r0
 80025e2:	eb43 0b01 	adc.w	fp, r3, r1
 80025e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f04f 0100 	mov.w	r1, #0
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	008b      	lsls	r3, r1, #2
 80025fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025fe:	0082      	lsls	r2, r0, #2
 8002600:	4650      	mov	r0, sl
 8002602:	4659      	mov	r1, fp
 8002604:	f7fd fe3c 	bl	8000280 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <UART_SetConfig+0x38c>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2164      	movs	r1, #100	; 0x64
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	3332      	adds	r3, #50	; 0x32
 8002620:	4a09      	ldr	r2, [pc, #36]	; (8002648 <UART_SetConfig+0x38c>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	f003 020f 	and.w	r2, r3, #15
 800262c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4432      	add	r2, r6
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	377c      	adds	r7, #124	; 0x7c
 8002638:	46bd      	mov	sp, r7
 800263a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800263e:	bf00      	nop
 8002640:	40011000 	.word	0x40011000
 8002644:	40011400 	.word	0x40011400
 8002648:	51eb851f 	.word	0x51eb851f

0800264c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800265a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265e:	2b84      	cmp	r3, #132	; 0x84
 8002660:	d005      	beq.n	800266e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002662:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	3303      	adds	r3, #3
 800266c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002680:	f000 ff30 	bl	80034e4 <vTaskStartScheduler>
  
  return osOK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	bd80      	pop	{r7, pc}

0800268a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800268a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268c:	b089      	sub	sp, #36	; 0x24
 800268e:	af04      	add	r7, sp, #16
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <osThreadCreate+0x54>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01c      	beq.n	80026de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685c      	ldr	r4, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681d      	ldr	r5, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691e      	ldr	r6, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ffc8 	bl	800264c <makeFreeRtosPriority>
 80026bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026c6:	9202      	str	r2, [sp, #8]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	9100      	str	r1, [sp, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4632      	mov	r2, r6
 80026d0:	4629      	mov	r1, r5
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 fd3e 	bl	8003154 <xTaskCreateStatic>
 80026d8:	4603      	mov	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e01c      	b.n	8002718 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685c      	ldr	r4, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ea:	b29e      	uxth	r6, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ffaa 	bl	800264c <makeFreeRtosPriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	9200      	str	r2, [sp, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	4632      	mov	r2, r6
 8002706:	4629      	mov	r1, r5
 8002708:	4620      	mov	r0, r4
 800270a:	f000 fd80 	bl	800320e <xTaskCreate>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	d001      	beq.n	8002718 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002718:	68fb      	ldr	r3, [r7, #12]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002722 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <osDelay+0x16>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	e000      	b.n	800273a <osDelay+0x18>
 8002738:	2301      	movs	r3, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fe9e 	bl	800347c <vTaskDelay>
  
  return osOK;
 8002740:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800274a:	b590      	push	{r4, r7, lr}
 800274c:	b085      	sub	sp, #20
 800274e:	af02      	add	r7, sp, #8
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d011      	beq.n	8002780 <osMessageCreate+0x36>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2400      	movs	r4, #0
 8002776:	9400      	str	r4, [sp, #0]
 8002778:	f000 f92c 	bl	80029d4 <xQueueGenericCreateStatic>
 800277c:	4603      	mov	r3, r0
 800277e:	e008      	b.n	8002792 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	4619      	mov	r1, r3
 800278c:	f000 f99a 	bl	8002ac4 <xQueueGenericCreate>
 8002790:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bd90      	pop	{r4, r7, pc}

0800279a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f103 0208 	add.w	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f04f 32ff 	mov.w	r2, #4294967295
 80027b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0208 	add.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f103 0208 	add.w	r2, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d103      	bne.n	800285c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e00c      	b.n	8002876 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3308      	adds	r3, #8
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e002      	b.n	800286a <vListInsert+0x2e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d2f6      	bcs.n	8002864 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6852      	ldr	r2, [r2, #4]
 80028ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d103      	bne.n	80028e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800292e:	f001 fc11 	bl	8004154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	441a      	add	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	3b01      	subs	r3, #1
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d114      	bne.n	80029ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01a      	beq.n	80029c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3310      	adds	r3, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f000 ffe9 	bl	8003968 <xTaskRemoveFromEventList>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <xQueueGenericReset+0xcc>)
 800299e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	e009      	b.n	80029c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3310      	adds	r3, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fef1 	bl	800279a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3324      	adds	r3, #36	; 0x24
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff feec 	bl	800279a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029c2:	f001 fbf7 	bl	80041b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <xQueueGenericCreateStatic+0x52>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <xQueueGenericCreateStatic+0x56>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericCreateStatic+0x58>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	623b      	str	r3, [r7, #32]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <xQueueGenericCreateStatic+0x7e>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericCreateStatic+0x82>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericCreateStatic+0x84>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61fb      	str	r3, [r7, #28]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a72:	2348      	movs	r3, #72	; 0x48
 8002a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b48      	cmp	r3, #72	; 0x48
 8002a7a:	d00a      	beq.n	8002a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61bb      	str	r3, [r7, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f83f 	bl	8002b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3730      	adds	r7, #48	; 0x30
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	613b      	str	r3, [r7, #16]
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3348      	adds	r3, #72	; 0x48
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fc0b 	bl	8004318 <pvPortMalloc>
 8002b02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d011      	beq.n	8002b2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3348      	adds	r3, #72	; 0x48
 8002b12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f805 	bl	8002b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e002      	b.n	8002b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b66:	2101      	movs	r1, #1
 8002b68:	69b8      	ldr	r0, [r7, #24]
 8002b6a:	f7ff fecb 	bl	8002904 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericSend+0x32>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <xQueueGenericSend+0x40>
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <xQueueGenericSend+0x44>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <xQueueGenericSend+0x46>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <xQueueGenericSend+0x60>
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x6e>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <xQueueGenericSend+0x72>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <xQueueGenericSend+0x74>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	623b      	str	r3, [r7, #32]
}
 8002c02:	bf00      	nop
 8002c04:	e7fe      	b.n	8002c04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c06:	f001 f86b 	bl	8003ce0 <xTaskGetSchedulerState>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <xQueueGenericSend+0x9e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <xQueueGenericSend+0xa2>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <xQueueGenericSend+0xa4>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	61fb      	str	r3, [r7, #28]
}
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c36:	f001 fa8d 	bl	8004154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <xQueueGenericSend+0xd4>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d129      	bne.n	8002ca0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c52:	f000 f96f 	bl	8002f34 <prvCopyDataToQueue>
 8002c56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	3324      	adds	r3, #36	; 0x24
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fe7f 	bl	8003968 <xTaskRemoveFromEventList>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <xQueueGenericSend+0x1f8>)
 8002c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	e00a      	b.n	8002c98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <xQueueGenericSend+0x1f8>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c98:	f001 fa8c 	bl	80041b4 <vPortExitCritical>
				return pdPASS;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e063      	b.n	8002d68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ca6:	f001 fa85 	bl	80041b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e05c      	b.n	8002d68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 feb7 	bl	8003a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc2:	f001 fa77 	bl	80041b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cc6:	f000 fc6d 	bl	80035a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cca:	f001 fa43 	bl	8004154 <vPortEnterCritical>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d103      	bne.n	8002ce4 <xQueueGenericSend+0x16c>
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d103      	bne.n	8002cfa <xQueueGenericSend+0x182>
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfa:	f001 fa5b 	bl	80041b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cfe:	1d3a      	adds	r2, r7, #4
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fea6 	bl	8003a58 <xTaskCheckForTimeOut>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d124      	bne.n	8002d5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d14:	f000 fa06 	bl	8003124 <prvIsQueueFull>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d018      	beq.n	8002d50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	3310      	adds	r3, #16
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fdfa 	bl	8003920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2e:	f000 f991 	bl	8003054 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d32:	f000 fc45 	bl	80035c0 <xTaskResumeAll>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f af7c 	bne.w	8002c36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <xQueueGenericSend+0x1f8>)
 8002d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	e772      	b.n	8002c36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d52:	f000 f97f 	bl	8003054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d56:	f000 fc33 	bl	80035c0 <xTaskResumeAll>
 8002d5a:	e76c      	b.n	8002c36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5e:	f000 f979 	bl	8003054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d62:	f000 fc2d 	bl	80035c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3738      	adds	r7, #56	; 0x38
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <xQueueReceive+0x30>
	__asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	623b      	str	r3, [r7, #32]
}
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <xQueueReceive+0x3e>
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueReceive+0x42>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueReceive+0x44>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <xQueueReceive+0x5e>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	61fb      	str	r3, [r7, #28]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dd2:	f000 ff85 	bl	8003ce0 <xTaskGetSchedulerState>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <xQueueReceive+0x6e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <xQueueReceive+0x72>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <xQueueReceive+0x74>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <xQueueReceive+0x8e>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	61bb      	str	r3, [r7, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	e7fe      	b.n	8002e00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e02:	f001 f9a7 	bl	8004154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01f      	beq.n	8002e52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e16:	f000 f8f7 	bl	8003008 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1e5a      	subs	r2, r3, #1
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00f      	beq.n	8002e4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fd9a 	bl	8003968 <xTaskRemoveFromEventList>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <xQueueReceive+0x1bc>)
 8002e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e4a:	f001 f9b3 	bl	80041b4 <vPortExitCritical>
				return pdPASS;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e069      	b.n	8002f26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d103      	bne.n	8002e60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e58:	f001 f9ac 	bl	80041b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e062      	b.n	8002f26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e66:	f107 0310 	add.w	r3, r7, #16
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fdde 	bl	8003a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e70:	2301      	movs	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e74:	f001 f99e 	bl	80041b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e78:	f000 fb94 	bl	80035a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e7c:	f001 f96a 	bl	8004154 <vPortEnterCritical>
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d103      	bne.n	8002e96 <xQueueReceive+0x122>
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d103      	bne.n	8002eac <xQueueReceive+0x138>
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eac:	f001 f982 	bl	80041b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eb0:	1d3a      	adds	r2, r7, #4
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fdcd 	bl	8003a58 <xTaskCheckForTimeOut>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d123      	bne.n	8002f0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec6:	f000 f917 	bl	80030f8 <prvIsQueueEmpty>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d017      	beq.n	8002f00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	3324      	adds	r3, #36	; 0x24
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fd21 	bl	8003920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee0:	f000 f8b8 	bl	8003054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ee4:	f000 fb6c 	bl	80035c0 <xTaskResumeAll>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d189      	bne.n	8002e02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <xQueueReceive+0x1bc>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	e780      	b.n	8002e02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f02:	f000 f8a7 	bl	8003054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f06:	f000 fb5b 	bl	80035c0 <xTaskResumeAll>
 8002f0a:	e77a      	b.n	8002e02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0e:	f000 f8a1 	bl	8003054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f12:	f000 fb55 	bl	80035c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f18:	f000 f8ee 	bl	80030f8 <prvIsQueueEmpty>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f43f af6f 	beq.w	8002e02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3730      	adds	r7, #48	; 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d14d      	bne.n	8002ff6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fedc 	bl	8003d1c <xTaskPriorityDisinherit>
 8002f64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e043      	b.n	8002ff6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d119      	bne.n	8002fa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6858      	ldr	r0, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	f001 fbde 	bl	8004740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	441a      	add	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d32b      	bcc.n	8002ff6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	e026      	b.n	8002ff6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68d8      	ldr	r0, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	f001 fbc4 	bl	8004740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	425b      	negs	r3, r3
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	425b      	negs	r3, r3
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d105      	bne.n	8002ff6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ffe:	697b      	ldr	r3, [r7, #20]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d018      	beq.n	800304c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	441a      	add	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	d303      	bcc.n	800303c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68d9      	ldr	r1, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	461a      	mov	r2, r3
 8003046:	6838      	ldr	r0, [r7, #0]
 8003048:	f001 fb7a 	bl	8004740 <memcpy>
	}
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800305c:	f001 f87a 	bl	8004154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003066:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003068:	e011      	b.n	800308e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3324      	adds	r3, #36	; 0x24
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fc76 	bl	8003968 <xTaskRemoveFromEventList>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003082:	f000 fd4b 	bl	8003b1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	3b01      	subs	r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	dce9      	bgt.n	800306a <prvUnlockQueue+0x16>
 8003096:	e000      	b.n	800309a <prvUnlockQueue+0x46>
					break;
 8003098:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	22ff      	movs	r2, #255	; 0xff
 800309e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030a2:	f001 f887 	bl	80041b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030a6:	f001 f855 	bl	8004154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b2:	e011      	b.n	80030d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3310      	adds	r3, #16
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc51 	bl	8003968 <xTaskRemoveFromEventList>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030cc:	f000 fd26 	bl	8003b1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030d0:	7bbb      	ldrb	r3, [r7, #14]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dce9      	bgt.n	80030b4 <prvUnlockQueue+0x60>
 80030e0:	e000      	b.n	80030e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	22ff      	movs	r2, #255	; 0xff
 80030e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030ec:	f001 f862 	bl	80041b4 <vPortExitCritical>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003100:	f001 f828 	bl	8004154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800310c:	2301      	movs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e001      	b.n	8003116 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003116:	f001 f84d 	bl	80041b4 <vPortExitCritical>

	return xReturn;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800312c:	f001 f812 	bl	8004154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	429a      	cmp	r2, r3
 800313a:	d102      	bne.n	8003142 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e001      	b.n	8003146 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003146:	f001 f835 	bl	80041b4 <vPortExitCritical>

	return xReturn;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af04      	add	r7, sp, #16
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	623b      	str	r3, [r7, #32]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <xTaskCreateStatic+0x46>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	61fb      	str	r3, [r7, #28]
}
 8003196:	bf00      	nop
 8003198:	e7fe      	b.n	8003198 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800319a:	2354      	movs	r3, #84	; 0x54
 800319c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b54      	cmp	r3, #84	; 0x54
 80031a2:	d00a      	beq.n	80031ba <xTaskCreateStatic+0x66>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	61bb      	str	r3, [r7, #24]
}
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01e      	beq.n	8003200 <xTaskCreateStatic+0xac>
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031da:	2300      	movs	r3, #0
 80031dc:	9303      	str	r3, [sp, #12]
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	9302      	str	r3, [sp, #8]
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f850 	bl	8003298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031fa:	f000 f8d5 	bl	80033a8 <prvAddNewTaskToReadyList>
 80031fe:	e001      	b.n	8003204 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003204:	697b      	ldr	r3, [r7, #20]
	}
 8003206:	4618      	mov	r0, r3
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800320e:	b580      	push	{r7, lr}
 8003210:	b08c      	sub	sp, #48	; 0x30
 8003212:	af04      	add	r7, sp, #16
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f001 f878 	bl	8004318 <pvPortMalloc>
 8003228:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003230:	2054      	movs	r0, #84	; 0x54
 8003232:	f001 f871 	bl	8004318 <pvPortMalloc>
 8003236:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	e005      	b.n	8003252 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f001 f932 	bl	80044b0 <vPortFree>
 800324c:	e001      	b.n	8003252 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d017      	beq.n	8003288 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	2300      	movs	r3, #0
 8003264:	9303      	str	r3, [sp, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	9302      	str	r3, [sp, #8]
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f80e 	bl	8003298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800327c:	69f8      	ldr	r0, [r7, #28]
 800327e:	f000 f893 	bl	80033a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003282:	2301      	movs	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e002      	b.n	800328e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800328e:	69bb      	ldr	r3, [r7, #24]
	}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032b0:	3b01      	subs	r3, #1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	617b      	str	r3, [r7, #20]
}
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01f      	beq.n	8003326 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	e012      	b.n	8003312 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	7819      	ldrb	r1, [r3, #0]
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	3334      	adds	r3, #52	; 0x34
 80032fc:	460a      	mov	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3301      	adds	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d9e9      	bls.n	80032ec <prvInitialiseNewTask+0x54>
 8003318:	e000      	b.n	800331c <prvInitialiseNewTask+0x84>
			{
				break;
 800331a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	e003      	b.n	800332e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b06      	cmp	r3, #6
 8003332:	d901      	bls.n	8003338 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003334:	2306      	movs	r3, #6
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	2200      	movs	r2, #0
 8003348:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	3304      	adds	r3, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fa43 	bl	80027da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fa3e 	bl	80027da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	f1c3 0207 	rsb	r2, r3, #7
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	2200      	movs	r2, #0
 8003378:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	68f9      	ldr	r1, [r7, #12]
 8003386:	69b8      	ldr	r0, [r7, #24]
 8003388:	f000 fdb4 	bl	8003ef4 <pxPortInitialiseStack>
 800338c:	4602      	mov	r2, r0
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033b0:	f000 fed0 	bl	8004154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <prvAddNewTaskToReadyList+0xb8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a29      	ldr	r2, [pc, #164]	; (8003460 <prvAddNewTaskToReadyList+0xb8>)
 80033bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <prvAddNewTaskToReadyList+0xbc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033c6:	4a27      	ldr	r2, [pc, #156]	; (8003464 <prvAddNewTaskToReadyList+0xbc>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <prvAddNewTaskToReadyList+0xb8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d110      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033d4:	f000 fbc6 	bl	8003b64 <prvInitialiseTaskLists>
 80033d8:	e00d      	b.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <prvAddNewTaskToReadyList+0xc0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <prvAddNewTaskToReadyList+0xbc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d802      	bhi.n	80033f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <prvAddNewTaskToReadyList+0xbc>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <prvAddNewTaskToReadyList+0xc4>)
 80033fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	4a18      	ldr	r2, [pc, #96]	; (8003470 <prvAddNewTaskToReadyList+0xc8>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4a15      	ldr	r2, [pc, #84]	; (8003474 <prvAddNewTaskToReadyList+0xcc>)
 8003420:	441a      	add	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f7ff f9e3 	bl	80027f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800342e:	f000 fec1 	bl	80041b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <prvAddNewTaskToReadyList+0xc0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <prvAddNewTaskToReadyList+0xbc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	429a      	cmp	r2, r3
 8003446:	d207      	bcs.n	8003458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <prvAddNewTaskToReadyList+0xd0>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200003e8 	.word	0x200003e8
 8003464:	200002e8 	.word	0x200002e8
 8003468:	200003f4 	.word	0x200003f4
 800346c:	20000404 	.word	0x20000404
 8003470:	200003f0 	.word	0x200003f0
 8003474:	200002ec 	.word	0x200002ec
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <vTaskDelay+0x60>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <vTaskDelay+0x30>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60bb      	str	r3, [r7, #8]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034ac:	f000 f87a 	bl	80035a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034b0:	2100      	movs	r1, #0
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fcb8 	bl	8003e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034b8:	f000 f882 	bl	80035c0 <xTaskResumeAll>
 80034bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <vTaskDelay+0x64>)
 80034c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000410 	.word	0x20000410
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034f2:	463a      	mov	r2, r7
 80034f4:	1d39      	adds	r1, r7, #4
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f83c 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	9202      	str	r2, [sp, #8]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2300      	movs	r3, #0
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	460a      	mov	r2, r1
 8003512:	491e      	ldr	r1, [pc, #120]	; (800358c <vTaskStartScheduler+0xa8>)
 8003514:	481e      	ldr	r0, [pc, #120]	; (8003590 <vTaskStartScheduler+0xac>)
 8003516:	f7ff fe1d 	bl	8003154 <xTaskCreateStatic>
 800351a:	4603      	mov	r3, r0
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <vTaskStartScheduler+0xb0>)
 800351e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <vTaskStartScheduler+0xb0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003528:	2301      	movs	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e001      	b.n	8003532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d116      	bne.n	8003566 <vTaskStartScheduler+0x82>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	613b      	str	r3, [r7, #16]
}
 800354a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <vTaskStartScheduler+0xb4>)
 800354e:	f04f 32ff 	mov.w	r2, #4294967295
 8003552:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <vTaskStartScheduler+0xb8>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <vTaskStartScheduler+0xbc>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003560:	f000 fd56 	bl	8004010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003564:	e00e      	b.n	8003584 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d10a      	bne.n	8003584 <vTaskStartScheduler+0xa0>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60fb      	str	r3, [r7, #12]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <vTaskStartScheduler+0x9e>
}
 8003584:	bf00      	nop
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	080051dc 	.word	0x080051dc
 8003590:	08003b35 	.word	0x08003b35
 8003594:	2000040c 	.word	0x2000040c
 8003598:	20000408 	.word	0x20000408
 800359c:	200003f4 	.word	0x200003f4
 80035a0:	200003ec 	.word	0x200003ec

080035a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <vTaskSuspendAll+0x18>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	4a03      	ldr	r2, [pc, #12]	; (80035bc <vTaskSuspendAll+0x18>)
 80035b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20000410 	.word	0x20000410

080035c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <xTaskResumeAll+0x114>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <xTaskResumeAll+0x2c>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	603b      	str	r3, [r7, #0]
}
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035ec:	f000 fdb2 	bl	8004154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035f0:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <xTaskResumeAll+0x114>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a37      	ldr	r2, [pc, #220]	; (80036d4 <xTaskResumeAll+0x114>)
 80035f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <xTaskResumeAll+0x114>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d161      	bne.n	80036c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003602:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <xTaskResumeAll+0x118>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d05d      	beq.n	80036c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800360a:	e02e      	b.n	800366a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <xTaskResumeAll+0x11c>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3318      	adds	r3, #24
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f948 	bl	80028ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3304      	adds	r3, #4
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff f943 	bl	80028ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <xTaskResumeAll+0x120>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <xTaskResumeAll+0x120>)
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <xTaskResumeAll+0x124>)
 8003648:	441a      	add	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7ff f8cf 	bl	80027f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <xTaskResumeAll+0x128>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003664:	4b21      	ldr	r3, [pc, #132]	; (80036ec <xTaskResumeAll+0x12c>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <xTaskResumeAll+0x11c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1cc      	bne.n	800360c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003678:	f000 fb12 	bl	8003ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <xTaskResumeAll+0x130>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d010      	beq.n	80036aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003688:	f000 f836 	bl	80036f8 <xTaskIncrementTick>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <xTaskResumeAll+0x12c>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f1      	bne.n	8003688 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <xTaskResumeAll+0x130>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <xTaskResumeAll+0x12c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036b2:	2301      	movs	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <xTaskResumeAll+0x134>)
 80036b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036c6:	f000 fd75 	bl	80041b4 <vPortExitCritical>

	return xAlreadyYielded;
 80036ca:	68bb      	ldr	r3, [r7, #8]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000410 	.word	0x20000410
 80036d8:	200003e8 	.word	0x200003e8
 80036dc:	200003a8 	.word	0x200003a8
 80036e0:	200003f0 	.word	0x200003f0
 80036e4:	200002ec 	.word	0x200002ec
 80036e8:	200002e8 	.word	0x200002e8
 80036ec:	200003fc 	.word	0x200003fc
 80036f0:	200003f8 	.word	0x200003f8
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <xTaskIncrementTick+0x144>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 808e 	bne.w	8003828 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800370c:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <xTaskIncrementTick+0x148>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003714:	4a4a      	ldr	r2, [pc, #296]	; (8003840 <xTaskIncrementTick+0x148>)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d120      	bne.n	8003762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003720:	4b48      	ldr	r3, [pc, #288]	; (8003844 <xTaskIncrementTick+0x14c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <xTaskIncrementTick+0x48>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	603b      	str	r3, [r7, #0]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <xTaskIncrementTick+0x46>
 8003740:	4b40      	ldr	r3, [pc, #256]	; (8003844 <xTaskIncrementTick+0x14c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b40      	ldr	r3, [pc, #256]	; (8003848 <xTaskIncrementTick+0x150>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3e      	ldr	r2, [pc, #248]	; (8003844 <xTaskIncrementTick+0x14c>)
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4a3e      	ldr	r2, [pc, #248]	; (8003848 <xTaskIncrementTick+0x150>)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <xTaskIncrementTick+0x154>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a3c      	ldr	r2, [pc, #240]	; (800384c <xTaskIncrementTick+0x154>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	f000 fa9f 	bl	8003ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <xTaskIncrementTick+0x158>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	429a      	cmp	r2, r3
 800376a:	d348      	bcc.n	80037fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <xTaskIncrementTick+0x14c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <xTaskIncrementTick+0x158>)
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	601a      	str	r2, [r3, #0]
					break;
 800377e:	e03e      	b.n	80037fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b30      	ldr	r3, [pc, #192]	; (8003844 <xTaskIncrementTick+0x14c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d203      	bcs.n	80037a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003798:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <xTaskIncrementTick+0x158>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800379e:	e02e      	b.n	80037fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff f882 	bl	80028ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3318      	adds	r3, #24
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff f879 	bl	80028ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <xTaskIncrementTick+0x15c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <xTaskIncrementTick+0x15c>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <xTaskIncrementTick+0x160>)
 80037dc:	441a      	add	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7ff f805 	bl	80027f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <xTaskIncrementTick+0x164>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3b9      	bcc.n	800376c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fc:	e7b6      	b.n	800376c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <xTaskIncrementTick+0x164>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4914      	ldr	r1, [pc, #80]	; (8003858 <xTaskIncrementTick+0x160>)
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d901      	bls.n	800381a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <xTaskIncrementTick+0x168>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003822:	2301      	movs	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e004      	b.n	8003832 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <xTaskIncrementTick+0x16c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <xTaskIncrementTick+0x16c>)
 8003830:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003832:	697b      	ldr	r3, [r7, #20]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000410 	.word	0x20000410
 8003840:	200003ec 	.word	0x200003ec
 8003844:	200003a0 	.word	0x200003a0
 8003848:	200003a4 	.word	0x200003a4
 800384c:	20000400 	.word	0x20000400
 8003850:	20000408 	.word	0x20000408
 8003854:	200003f0 	.word	0x200003f0
 8003858:	200002ec 	.word	0x200002ec
 800385c:	200002e8 	.word	0x200002e8
 8003860:	200003fc 	.word	0x200003fc
 8003864:	200003f8 	.word	0x200003f8

08003868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800386e:	4b27      	ldr	r3, [pc, #156]	; (800390c <vTaskSwitchContext+0xa4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <vTaskSwitchContext+0xa8>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800387c:	e03f      	b.n	80038fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <vTaskSwitchContext+0xa8>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003884:	4b23      	ldr	r3, [pc, #140]	; (8003914 <vTaskSwitchContext+0xac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	f1c3 031f 	rsb	r3, r3, #31
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	491f      	ldr	r1, [pc, #124]	; (8003918 <vTaskSwitchContext+0xb0>)
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <vTaskSwitchContext+0x5a>
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <vTaskSwitchContext+0xb0>)
 80038d0:	4413      	add	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3308      	adds	r3, #8
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d104      	bne.n	80038f4 <vTaskSwitchContext+0x8c>
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <vTaskSwitchContext+0xb4>)
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000410 	.word	0x20000410
 8003910:	200003fc 	.word	0x200003fc
 8003914:	200003f0 	.word	0x200003f0
 8003918:	200002ec 	.word	0x200002ec
 800391c:	200002e8 	.word	0x200002e8

08003920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <vTaskPlaceOnEventList+0x44>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3318      	adds	r3, #24
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe ff74 	bl	800283c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003954:	2101      	movs	r1, #1
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f000 fa66 	bl	8003e28 <prvAddCurrentTaskToDelayedList>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200002e8 	.word	0x200002e8

08003968 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60fb      	str	r3, [r7, #12]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	3318      	adds	r3, #24
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe ff88 	bl	80028ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <xTaskRemoveFromEventList+0xac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11c      	bne.n	80039e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe ff7f 	bl	80028ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <xTaskRemoveFromEventList+0xb0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <xTaskRemoveFromEventList+0xb0>)
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <xTaskRemoveFromEventList+0xb4>)
 80039d0:	441a      	add	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f7fe ff0b 	bl	80027f4 <vListInsertEnd>
 80039de:	e005      	b.n	80039ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3318      	adds	r3, #24
 80039e4:	4619      	mov	r1, r3
 80039e6:	480e      	ldr	r0, [pc, #56]	; (8003a20 <xTaskRemoveFromEventList+0xb8>)
 80039e8:	f7fe ff04 	bl	80027f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <xTaskRemoveFromEventList+0xbc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d905      	bls.n	8003a06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <xTaskRemoveFromEventList+0xc0>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e001      	b.n	8003a0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a0a:	697b      	ldr	r3, [r7, #20]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000410 	.word	0x20000410
 8003a18:	200003f0 	.word	0x200003f0
 8003a1c:	200002ec 	.word	0x200002ec
 8003a20:	200003a8 	.word	0x200003a8
 8003a24:	200002e8 	.word	0x200002e8
 8003a28:	200003fc 	.word	0x200003fc

08003a2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <vTaskInternalSetTimeOutState+0x24>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <vTaskInternalSetTimeOutState+0x28>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000400 	.word	0x20000400
 8003a54:	200003ec 	.word	0x200003ec

08003a58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	613b      	str	r3, [r7, #16]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	60fb      	str	r3, [r7, #12]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a9a:	f000 fb5b 	bl	8004154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <xTaskCheckForTimeOut+0xbc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d102      	bne.n	8003abe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e023      	b.n	8003b06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <xTaskCheckForTimeOut+0xc0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d007      	beq.n	8003ada <xTaskCheckForTimeOut+0x82>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e015      	b.n	8003b06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d20b      	bcs.n	8003afc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff9b 	bl	8003a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e004      	b.n	8003b06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f000 fb55 	bl	80041b4 <vPortExitCritical>

	return xReturn;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200003ec 	.word	0x200003ec
 8003b18:	20000400 	.word	0x20000400

08003b1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <vTaskMissedYield+0x14>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	200003fc 	.word	0x200003fc

08003b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b3c:	f000 f852 	bl	8003be4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <prvIdleTask+0x28>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d9f9      	bls.n	8003b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <prvIdleTask+0x2c>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b58:	e7f0      	b.n	8003b3c <prvIdleTask+0x8>
 8003b5a:	bf00      	nop
 8003b5c:	200002ec 	.word	0x200002ec
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	e00c      	b.n	8003b8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <prvInitialiseTaskLists+0x60>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fe0b 	bl	800279a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d9ef      	bls.n	8003b70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b90:	480d      	ldr	r0, [pc, #52]	; (8003bc8 <prvInitialiseTaskLists+0x64>)
 8003b92:	f7fe fe02 	bl	800279a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b96:	480d      	ldr	r0, [pc, #52]	; (8003bcc <prvInitialiseTaskLists+0x68>)
 8003b98:	f7fe fdff 	bl	800279a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b9c:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <prvInitialiseTaskLists+0x6c>)
 8003b9e:	f7fe fdfc 	bl	800279a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ba2:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <prvInitialiseTaskLists+0x70>)
 8003ba4:	f7fe fdf9 	bl	800279a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ba8:	480b      	ldr	r0, [pc, #44]	; (8003bd8 <prvInitialiseTaskLists+0x74>)
 8003baa:	f7fe fdf6 	bl	800279a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <prvInitialiseTaskLists+0x78>)
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <prvInitialiseTaskLists+0x64>)
 8003bb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <prvInitialiseTaskLists+0x7c>)
 8003bb6:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <prvInitialiseTaskLists+0x68>)
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200002ec 	.word	0x200002ec
 8003bc8:	20000378 	.word	0x20000378
 8003bcc:	2000038c 	.word	0x2000038c
 8003bd0:	200003a8 	.word	0x200003a8
 8003bd4:	200003bc 	.word	0x200003bc
 8003bd8:	200003d4 	.word	0x200003d4
 8003bdc:	200003a0 	.word	0x200003a0
 8003be0:	200003a4 	.word	0x200003a4

08003be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bea:	e019      	b.n	8003c20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bec:	f000 fab2 	bl	8004154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <prvCheckTasksWaitingTermination+0x50>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fe56 	bl	80028ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <prvCheckTasksWaitingTermination+0x54>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <prvCheckTasksWaitingTermination+0x54>)
 8003c0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c16:	f000 facd 	bl	80041b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f810 	bl	8003c40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e1      	bne.n	8003bec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200003bc 	.word	0x200003bc
 8003c38:	200003e8 	.word	0x200003e8
 8003c3c:	200003d0 	.word	0x200003d0

08003c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fc2a 	bl	80044b0 <vPortFree>
				vPortFree( pxTCB );
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fc27 	bl	80044b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c62:	e018      	b.n	8003c96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d103      	bne.n	8003c76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fc1e 	bl	80044b0 <vPortFree>
	}
 8003c74:	e00f      	b.n	8003c96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d00a      	beq.n	8003c96 <prvDeleteTCB+0x56>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <prvDeleteTCB+0x54>
	}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <prvResetNextTaskUnblockTime+0x38>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <prvResetNextTaskUnblockTime+0x3c>)
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cb8:	e008      	b.n	8003ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <prvResetNextTaskUnblockTime+0x38>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <prvResetNextTaskUnblockTime+0x3c>)
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	200003a0 	.word	0x200003a0
 8003cdc:	20000408 	.word	0x20000408

08003ce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <xTaskGetSchedulerState+0x34>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	e008      	b.n	8003d06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <xTaskGetSchedulerState+0x38>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	e001      	b.n	8003d06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d06:	687b      	ldr	r3, [r7, #4]
	}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	200003f4 	.word	0x200003f4
 8003d18:	20000410 	.word	0x20000410

08003d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06e      	beq.n	8003e10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d32:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <xTaskPriorityDisinherit+0x100>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d00a      	beq.n	8003d52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60bb      	str	r3, [r7, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d044      	beq.n	8003e10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d140      	bne.n	8003e10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fd8b 	bl	80028ae <uxListRemove>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d115      	bne.n	8003dca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	491f      	ldr	r1, [pc, #124]	; (8003e20 <xTaskPriorityDisinherit+0x104>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xTaskPriorityDisinherit+0xae>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	2201      	movs	r2, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <xTaskPriorityDisinherit+0x108>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <xTaskPriorityDisinherit+0x108>)
 8003dc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f1c3 0207 	rsb	r2, r3, #7
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	2201      	movs	r2, #1
 8003de4:	409a      	lsls	r2, r3
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <xTaskPriorityDisinherit+0x108>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <xTaskPriorityDisinherit+0x108>)
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <xTaskPriorityDisinherit+0x104>)
 8003dfe:	441a      	add	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f7fe fcf4 	bl	80027f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e10:	697b      	ldr	r3, [r7, #20]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200002e8 	.word	0x200002e8
 8003e20:	200002ec 	.word	0x200002ec
 8003e24:	200003f0 	.word	0x200003f0

08003e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fd35 	bl	80028ae <uxListRemove>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d10a      	bne.n	8003e80 <prvAddCurrentTaskToDelayedList+0x58>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	481a      	ldr	r0, [pc, #104]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e7a:	f7fe fcbb 	bl	80027f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e7e:	e026      	b.n	8003ece <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d209      	bcs.n	8003eac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe fcc9 	bl	800283c <vListInsert>
}
 8003eaa:	e010      	b.n	8003ece <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <prvAddCurrentTaskToDelayedList+0xc4>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7fe fcbf 	bl	800283c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d202      	bcs.n	8003ece <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200003ec 	.word	0x200003ec
 8003edc:	200002e8 	.word	0x200002e8
 8003ee0:	200003f0 	.word	0x200003f0
 8003ee4:	200003d4 	.word	0x200003d4
 8003ee8:	200003a4 	.word	0x200003a4
 8003eec:	200003a0 	.word	0x200003a0
 8003ef0:	20000408 	.word	0x20000408

08003ef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b04      	subs	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3b04      	subs	r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b04      	subs	r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f24:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <pxPortInitialiseStack+0x64>)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3b14      	subs	r3, #20
 8003f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f06f 0202 	mvn.w	r2, #2
 8003f42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3b20      	subs	r3, #32
 8003f48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	08003f5d 	.word	0x08003f5d

08003f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <prvTaskExitError+0x54>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d00a      	beq.n	8003f86 <prvTaskExitError+0x2a>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60fb      	str	r3, [r7, #12]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <prvTaskExitError+0x28>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
}
 8003f98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f9a:	bf00      	nop
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0fc      	beq.n	8003f9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	2000000c 	.word	0x2000000c
	...

08003fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <pxCurrentTCBConst2>)
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	6808      	ldr	r0, [r1, #0]
 8003fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fca:	f380 8809 	msr	PSP, r0
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8811 	msr	BASEPRI, r0
 8003fda:	4770      	bx	lr
 8003fdc:	f3af 8000 	nop.w

08003fe0 <pxCurrentTCBConst2>:
 8003fe0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003fe8:	4808      	ldr	r0, [pc, #32]	; (800400c <prvPortStartFirstTask+0x24>)
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	6800      	ldr	r0, [r0, #0]
 8003fee:	f380 8808 	msr	MSP, r0
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8814 	msr	CONTROL, r0
 8003ffa:	b662      	cpsie	i
 8003ffc:	b661      	cpsie	f
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	df00      	svc	0
 8004008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800400a:	bf00      	nop
 800400c:	e000ed08 	.word	0xe000ed08

08004010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004016:	4b46      	ldr	r3, [pc, #280]	; (8004130 <xPortStartScheduler+0x120>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a46      	ldr	r2, [pc, #280]	; (8004134 <xPortStartScheduler+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10a      	bne.n	8004036 <xPortStartScheduler+0x26>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <xPortStartScheduler+0x120>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <xPortStartScheduler+0x128>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10a      	bne.n	8004056 <xPortStartScheduler+0x46>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <xPortStartScheduler+0x12c>)
 8004058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	22ff      	movs	r2, #255	; 0xff
 8004066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <xPortStartScheduler+0x130>)
 800407c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800407e:	4b31      	ldr	r3, [pc, #196]	; (8004144 <xPortStartScheduler+0x134>)
 8004080:	2207      	movs	r2, #7
 8004082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004084:	e009      	b.n	800409a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004086:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <xPortStartScheduler+0x134>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3b01      	subs	r3, #1
 800408c:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <xPortStartScheduler+0x134>)
 800408e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d0ef      	beq.n	8004086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040a6:	4b27      	ldr	r3, [pc, #156]	; (8004144 <xPortStartScheduler+0x134>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1c3 0307 	rsb	r3, r3, #7
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d00a      	beq.n	80040c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <xPortStartScheduler+0x134>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <xPortStartScheduler+0x134>)
 80040d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <xPortStartScheduler+0x134>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040da:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <xPortStartScheduler+0x134>)
 80040dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <xPortStartScheduler+0x138>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <xPortStartScheduler+0x138>)
 80040ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <xPortStartScheduler+0x138>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <xPortStartScheduler+0x138>)
 80040f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040fe:	f000 f8dd 	bl	80042bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <xPortStartScheduler+0x13c>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004108:	f000 f8fc 	bl	8004304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <xPortStartScheduler+0x140>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <xPortStartScheduler+0x140>)
 8004112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004118:	f7ff ff66 	bl	8003fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800411c:	f7ff fba4 	bl	8003868 <vTaskSwitchContext>
	prvTaskExitError();
 8004120:	f7ff ff1c 	bl	8003f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	e000ed00 	.word	0xe000ed00
 8004134:	410fc271 	.word	0x410fc271
 8004138:	410fc270 	.word	0x410fc270
 800413c:	e000e400 	.word	0xe000e400
 8004140:	20000414 	.word	0x20000414
 8004144:	20000418 	.word	0x20000418
 8004148:	e000ed20 	.word	0xe000ed20
 800414c:	2000000c 	.word	0x2000000c
 8004150:	e000ef34 	.word	0xe000ef34

08004154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	607b      	str	r3, [r7, #4]
}
 800416c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <vPortEnterCritical+0x58>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <vPortEnterCritical+0x58>)
 8004176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <vPortEnterCritical+0x58>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d10f      	bne.n	80041a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <vPortEnterCritical+0x5c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	603b      	str	r3, [r7, #0]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <vPortEnterCritical+0x4a>
	}
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	2000000c 	.word	0x2000000c
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <vPortExitCritical+0x50>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <vPortExitCritical+0x24>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <vPortExitCritical+0x50>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <vPortExitCritical+0x50>)
 80041e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <vPortExitCritical+0x50>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <vPortExitCritical+0x42>
 80041ea:	2300      	movs	r3, #0
 80041ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c
	...

08004210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004210:	f3ef 8009 	mrs	r0, PSP
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <pxCurrentTCBConst>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	f01e 0f10 	tst.w	lr, #16
 8004220:	bf08      	it	eq
 8004222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	6010      	str	r0, [r2, #0]
 800422c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004234:	f380 8811 	msr	BASEPRI, r0
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f7ff fb12 	bl	8003868 <vTaskSwitchContext>
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f380 8811 	msr	BASEPRI, r0
 800424c:	bc09      	pop	{r0, r3}
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	6808      	ldr	r0, [r1, #0]
 8004252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004256:	f01e 0f10 	tst.w	lr, #16
 800425a:	bf08      	it	eq
 800425c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004260:	f380 8809 	msr	PSP, r0
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	f3af 8000 	nop.w

08004270 <pxCurrentTCBConst>:
 8004270:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
}
 8004290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004292:	f7ff fa31 	bl	80036f8 <xTaskIncrementTick>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <SysTick_Handler+0x40>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f383 8811 	msr	BASEPRI, r3
}
 80042ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <vPortSetupTimerInterrupt+0x34>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <vPortSetupTimerInterrupt+0x38>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <vPortSetupTimerInterrupt+0x3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <vPortSetupTimerInterrupt+0x40>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <vPortSetupTimerInterrupt+0x44>)
 80042da:	3b01      	subs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <vPortSetupTimerInterrupt+0x34>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000e010 	.word	0xe000e010
 80042f4:	e000e018 	.word	0xe000e018
 80042f8:	20000000 	.word	0x20000000
 80042fc:	10624dd3 	.word	0x10624dd3
 8004300:	e000e014 	.word	0xe000e014

08004304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004314 <vPortEnableVFP+0x10>
 8004308:	6801      	ldr	r1, [r0, #0]
 800430a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800430e:	6001      	str	r1, [r0, #0]
 8004310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004312:	bf00      	nop
 8004314:	e000ed88 	.word	0xe000ed88

08004318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004324:	f7ff f93e 	bl	80035a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004328:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <pvPortMalloc+0x180>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004330:	f000 f920 	bl	8004574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004334:	4b59      	ldr	r3, [pc, #356]	; (800449c <pvPortMalloc+0x184>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	f040 8093 	bne.w	8004468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01d      	beq.n	8004384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004348:	2208      	movs	r2, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b00      	cmp	r3, #0
 8004358:	d014      	beq.n	8004384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f023 0307 	bic.w	r3, r3, #7
 8004360:	3308      	adds	r3, #8
 8004362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <pvPortMalloc+0x6c>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	617b      	str	r3, [r7, #20]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06e      	beq.n	8004468 <pvPortMalloc+0x150>
 800438a:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <pvPortMalloc+0x188>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d869      	bhi.n	8004468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004394:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <pvPortMalloc+0x18c>)
 8004396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004398:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <pvPortMalloc+0x18c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800439e:	e004      	b.n	80043aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <pvPortMalloc+0xa4>
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f1      	bne.n	80043a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043bc:	4b36      	ldr	r3, [pc, #216]	; (8004498 <pvPortMalloc+0x180>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d050      	beq.n	8004468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2208      	movs	r2, #8
 80043cc:	4413      	add	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	2308      	movs	r3, #8
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d91f      	bls.n	8004428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <pvPortMalloc+0xf8>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	613b      	str	r3, [r7, #16]
}
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad2      	subs	r2, r2, r3
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004422:	69b8      	ldr	r0, [r7, #24]
 8004424:	f000 f908 	bl	8004638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <pvPortMalloc+0x188>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	4a1b      	ldr	r2, [pc, #108]	; (80044a0 <pvPortMalloc+0x188>)
 8004434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <pvPortMalloc+0x188>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <pvPortMalloc+0x190>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d203      	bcs.n	800444a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <pvPortMalloc+0x188>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <pvPortMalloc+0x190>)
 8004448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <pvPortMalloc+0x184>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	431a      	orrs	r2, r3
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <pvPortMalloc+0x194>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <pvPortMalloc+0x194>)
 8004466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004468:	f7ff f8aa 	bl	80035c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <pvPortMalloc+0x174>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <pvPortMalloc+0x172>
	return pvReturn;
 800448c:	69fb      	ldr	r3, [r7, #28]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20004024 	.word	0x20004024
 800449c:	20004038 	.word	0x20004038
 80044a0:	20004028 	.word	0x20004028
 80044a4:	2000401c 	.word	0x2000401c
 80044a8:	2000402c 	.word	0x2000402c
 80044ac:	20004030 	.word	0x20004030

080044b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04d      	beq.n	800455e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044c2:	2308      	movs	r3, #8
 80044c4:	425b      	negs	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <vPortFree+0xb8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <vPortFree+0x44>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <vPortFree+0x62>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60bb      	str	r3, [r7, #8]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <vPortFree+0xb8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01e      	beq.n	800455e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11a      	bne.n	800455e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <vPortFree+0xb8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004538:	f7ff f834 	bl	80035a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <vPortFree+0xbc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4413      	add	r3, r2
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <vPortFree+0xbc>)
 8004548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800454a:	6938      	ldr	r0, [r7, #16]
 800454c:	f000 f874 	bl	8004638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <vPortFree+0xc0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a06      	ldr	r2, [pc, #24]	; (8004570 <vPortFree+0xc0>)
 8004558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800455a:	f7ff f831 	bl	80035c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20004038 	.word	0x20004038
 800456c:	20004028 	.word	0x20004028
 8004570:	20004034 	.word	0x20004034

08004574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800457a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800457e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004580:	4b27      	ldr	r3, [pc, #156]	; (8004620 <prvHeapInit+0xac>)
 8004582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3307      	adds	r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <prvHeapInit+0xac>)
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <prvHeapInit+0xb0>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <prvHeapInit+0xb0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045c0:	2208      	movs	r2, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <prvHeapInit+0xb4>)
 80045d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <prvHeapInit+0xb4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <prvHeapInit+0xb4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <prvHeapInit+0xb4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <prvHeapInit+0xb8>)
 8004602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <prvHeapInit+0xbc>)
 800460a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <prvHeapInit+0xc0>)
 800460e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	2000041c 	.word	0x2000041c
 8004624:	2000401c 	.word	0x2000401c
 8004628:	20004024 	.word	0x20004024
 800462c:	2000402c 	.word	0x2000402c
 8004630:	20004028 	.word	0x20004028
 8004634:	20004038 	.word	0x20004038

08004638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <prvInsertBlockIntoFreeList+0xac>)
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e002      	b.n	800464c <prvInsertBlockIntoFreeList+0x14>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d8f7      	bhi.n	8004646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d108      	bne.n	800467a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d118      	bne.n	80046c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d00d      	beq.n	80046b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e008      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <prvInsertBlockIntoFreeList+0xb0>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e003      	b.n	80046c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d002      	beq.n	80046d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000401c 	.word	0x2000401c
 80046e8:	20004024 	.word	0x20004024

080046ec <__errno>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <__errno+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000010 	.word	0x20000010

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	; (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	; (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x44>)
 800470c:	f000 fc4e 	bl	8004fac <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	08005238 	.word	0x08005238
 8004734:	08005238 	.word	0x08005238
 8004738:	08005238 	.word	0x08005238
 800473c:	0800523c 	.word	0x0800523c

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004756:	4291      	cmp	r1, r2
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memset>:
 800475c:	4402      	add	r2, r0
 800475e:	4603      	mov	r3, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <siprintf>:
 800476c:	b40e      	push	{r1, r2, r3}
 800476e:	b500      	push	{lr}
 8004770:	b09c      	sub	sp, #112	; 0x70
 8004772:	ab1d      	add	r3, sp, #116	; 0x74
 8004774:	9002      	str	r0, [sp, #8]
 8004776:	9006      	str	r0, [sp, #24]
 8004778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <siprintf+0x38>)
 800477e:	9107      	str	r1, [sp, #28]
 8004780:	9104      	str	r1, [sp, #16]
 8004782:	4909      	ldr	r1, [pc, #36]	; (80047a8 <siprintf+0x3c>)
 8004784:	f853 2b04 	ldr.w	r2, [r3], #4
 8004788:	9105      	str	r1, [sp, #20]
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	a902      	add	r1, sp, #8
 8004790:	f000 f868 	bl	8004864 <_svfiprintf_r>
 8004794:	9b02      	ldr	r3, [sp, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	b01c      	add	sp, #112	; 0x70
 800479c:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a0:	b003      	add	sp, #12
 80047a2:	4770      	bx	lr
 80047a4:	20000010 	.word	0x20000010
 80047a8:	ffff0208 	.word	0xffff0208

080047ac <__ssputs_r>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	688e      	ldr	r6, [r1, #8]
 80047b2:	429e      	cmp	r6, r3
 80047b4:	4682      	mov	sl, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4690      	mov	r8, r2
 80047ba:	461f      	mov	r7, r3
 80047bc:	d838      	bhi.n	8004830 <__ssputs_r+0x84>
 80047be:	898a      	ldrh	r2, [r1, #12]
 80047c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047c4:	d032      	beq.n	800482c <__ssputs_r+0x80>
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	6909      	ldr	r1, [r1, #16]
 80047ca:	eba5 0901 	sub.w	r9, r5, r1
 80047ce:	6965      	ldr	r5, [r4, #20]
 80047d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d8:	3301      	adds	r3, #1
 80047da:	444b      	add	r3, r9
 80047dc:	106d      	asrs	r5, r5, #1
 80047de:	429d      	cmp	r5, r3
 80047e0:	bf38      	it	cc
 80047e2:	461d      	movcc	r5, r3
 80047e4:	0553      	lsls	r3, r2, #21
 80047e6:	d531      	bpl.n	800484c <__ssputs_r+0xa0>
 80047e8:	4629      	mov	r1, r5
 80047ea:	f000 fb39 	bl	8004e60 <_malloc_r>
 80047ee:	4606      	mov	r6, r0
 80047f0:	b950      	cbnz	r0, 8004808 <__ssputs_r+0x5c>
 80047f2:	230c      	movs	r3, #12
 80047f4:	f8ca 3000 	str.w	r3, [sl]
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	6921      	ldr	r1, [r4, #16]
 800480a:	464a      	mov	r2, r9
 800480c:	f7ff ff98 	bl	8004740 <memcpy>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	6126      	str	r6, [r4, #16]
 800481e:	6165      	str	r5, [r4, #20]
 8004820:	444e      	add	r6, r9
 8004822:	eba5 0509 	sub.w	r5, r5, r9
 8004826:	6026      	str	r6, [r4, #0]
 8004828:	60a5      	str	r5, [r4, #8]
 800482a:	463e      	mov	r6, r7
 800482c:	42be      	cmp	r6, r7
 800482e:	d900      	bls.n	8004832 <__ssputs_r+0x86>
 8004830:	463e      	mov	r6, r7
 8004832:	4632      	mov	r2, r6
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	4641      	mov	r1, r8
 8004838:	f000 faa8 	bl	8004d8c <memmove>
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	1b9b      	subs	r3, r3, r6
 8004842:	4432      	add	r2, r6
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6022      	str	r2, [r4, #0]
 8004848:	2000      	movs	r0, #0
 800484a:	e7db      	b.n	8004804 <__ssputs_r+0x58>
 800484c:	462a      	mov	r2, r5
 800484e:	f000 fb61 	bl	8004f14 <_realloc_r>
 8004852:	4606      	mov	r6, r0
 8004854:	2800      	cmp	r0, #0
 8004856:	d1e1      	bne.n	800481c <__ssputs_r+0x70>
 8004858:	6921      	ldr	r1, [r4, #16]
 800485a:	4650      	mov	r0, sl
 800485c:	f000 fab0 	bl	8004dc0 <_free_r>
 8004860:	e7c7      	b.n	80047f2 <__ssputs_r+0x46>
	...

08004864 <_svfiprintf_r>:
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	4698      	mov	r8, r3
 800486a:	898b      	ldrh	r3, [r1, #12]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	b09d      	sub	sp, #116	; 0x74
 8004870:	4607      	mov	r7, r0
 8004872:	460d      	mov	r5, r1
 8004874:	4614      	mov	r4, r2
 8004876:	d50e      	bpl.n	8004896 <_svfiprintf_r+0x32>
 8004878:	690b      	ldr	r3, [r1, #16]
 800487a:	b963      	cbnz	r3, 8004896 <_svfiprintf_r+0x32>
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	f000 faef 	bl	8004e60 <_malloc_r>
 8004882:	6028      	str	r0, [r5, #0]
 8004884:	6128      	str	r0, [r5, #16]
 8004886:	b920      	cbnz	r0, 8004892 <_svfiprintf_r+0x2e>
 8004888:	230c      	movs	r3, #12
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	e0d1      	b.n	8004a36 <_svfiprintf_r+0x1d2>
 8004892:	2340      	movs	r3, #64	; 0x40
 8004894:	616b      	str	r3, [r5, #20]
 8004896:	2300      	movs	r3, #0
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	2320      	movs	r3, #32
 800489c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a4:	2330      	movs	r3, #48	; 0x30
 80048a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a50 <_svfiprintf_r+0x1ec>
 80048aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ae:	f04f 0901 	mov.w	r9, #1
 80048b2:	4623      	mov	r3, r4
 80048b4:	469a      	mov	sl, r3
 80048b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ba:	b10a      	cbz	r2, 80048c0 <_svfiprintf_r+0x5c>
 80048bc:	2a25      	cmp	r2, #37	; 0x25
 80048be:	d1f9      	bne.n	80048b4 <_svfiprintf_r+0x50>
 80048c0:	ebba 0b04 	subs.w	fp, sl, r4
 80048c4:	d00b      	beq.n	80048de <_svfiprintf_r+0x7a>
 80048c6:	465b      	mov	r3, fp
 80048c8:	4622      	mov	r2, r4
 80048ca:	4629      	mov	r1, r5
 80048cc:	4638      	mov	r0, r7
 80048ce:	f7ff ff6d 	bl	80047ac <__ssputs_r>
 80048d2:	3001      	adds	r0, #1
 80048d4:	f000 80aa 	beq.w	8004a2c <_svfiprintf_r+0x1c8>
 80048d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048da:	445a      	add	r2, fp
 80048dc:	9209      	str	r2, [sp, #36]	; 0x24
 80048de:	f89a 3000 	ldrb.w	r3, [sl]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a2 	beq.w	8004a2c <_svfiprintf_r+0x1c8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f04f 32ff 	mov.w	r2, #4294967295
 80048ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f2:	f10a 0a01 	add.w	sl, sl, #1
 80048f6:	9304      	str	r3, [sp, #16]
 80048f8:	9307      	str	r3, [sp, #28]
 80048fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004900:	4654      	mov	r4, sl
 8004902:	2205      	movs	r2, #5
 8004904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004908:	4851      	ldr	r0, [pc, #324]	; (8004a50 <_svfiprintf_r+0x1ec>)
 800490a:	f7fb fc69 	bl	80001e0 <memchr>
 800490e:	9a04      	ldr	r2, [sp, #16]
 8004910:	b9d8      	cbnz	r0, 800494a <_svfiprintf_r+0xe6>
 8004912:	06d0      	lsls	r0, r2, #27
 8004914:	bf44      	itt	mi
 8004916:	2320      	movmi	r3, #32
 8004918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491c:	0711      	lsls	r1, r2, #28
 800491e:	bf44      	itt	mi
 8004920:	232b      	movmi	r3, #43	; 0x2b
 8004922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004926:	f89a 3000 	ldrb.w	r3, [sl]
 800492a:	2b2a      	cmp	r3, #42	; 0x2a
 800492c:	d015      	beq.n	800495a <_svfiprintf_r+0xf6>
 800492e:	9a07      	ldr	r2, [sp, #28]
 8004930:	4654      	mov	r4, sl
 8004932:	2000      	movs	r0, #0
 8004934:	f04f 0c0a 	mov.w	ip, #10
 8004938:	4621      	mov	r1, r4
 800493a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493e:	3b30      	subs	r3, #48	; 0x30
 8004940:	2b09      	cmp	r3, #9
 8004942:	d94e      	bls.n	80049e2 <_svfiprintf_r+0x17e>
 8004944:	b1b0      	cbz	r0, 8004974 <_svfiprintf_r+0x110>
 8004946:	9207      	str	r2, [sp, #28]
 8004948:	e014      	b.n	8004974 <_svfiprintf_r+0x110>
 800494a:	eba0 0308 	sub.w	r3, r0, r8
 800494e:	fa09 f303 	lsl.w	r3, r9, r3
 8004952:	4313      	orrs	r3, r2
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	46a2      	mov	sl, r4
 8004958:	e7d2      	b.n	8004900 <_svfiprintf_r+0x9c>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	1d19      	adds	r1, r3, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	9103      	str	r1, [sp, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfbb      	ittet	lt
 8004966:	425b      	neglt	r3, r3
 8004968:	f042 0202 	orrlt.w	r2, r2, #2
 800496c:	9307      	strge	r3, [sp, #28]
 800496e:	9307      	strlt	r3, [sp, #28]
 8004970:	bfb8      	it	lt
 8004972:	9204      	strlt	r2, [sp, #16]
 8004974:	7823      	ldrb	r3, [r4, #0]
 8004976:	2b2e      	cmp	r3, #46	; 0x2e
 8004978:	d10c      	bne.n	8004994 <_svfiprintf_r+0x130>
 800497a:	7863      	ldrb	r3, [r4, #1]
 800497c:	2b2a      	cmp	r3, #42	; 0x2a
 800497e:	d135      	bne.n	80049ec <_svfiprintf_r+0x188>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfb8      	it	lt
 800498c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004990:	3402      	adds	r4, #2
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a60 <_svfiprintf_r+0x1fc>
 8004998:	7821      	ldrb	r1, [r4, #0]
 800499a:	2203      	movs	r2, #3
 800499c:	4650      	mov	r0, sl
 800499e:	f7fb fc1f 	bl	80001e0 <memchr>
 80049a2:	b140      	cbz	r0, 80049b6 <_svfiprintf_r+0x152>
 80049a4:	2340      	movs	r3, #64	; 0x40
 80049a6:	eba0 000a 	sub.w	r0, r0, sl
 80049aa:	fa03 f000 	lsl.w	r0, r3, r0
 80049ae:	9b04      	ldr	r3, [sp, #16]
 80049b0:	4303      	orrs	r3, r0
 80049b2:	3401      	adds	r4, #1
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ba:	4826      	ldr	r0, [pc, #152]	; (8004a54 <_svfiprintf_r+0x1f0>)
 80049bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c0:	2206      	movs	r2, #6
 80049c2:	f7fb fc0d 	bl	80001e0 <memchr>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d038      	beq.n	8004a3c <_svfiprintf_r+0x1d8>
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <_svfiprintf_r+0x1f4>)
 80049cc:	bb1b      	cbnz	r3, 8004a16 <_svfiprintf_r+0x1b2>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	3307      	adds	r3, #7
 80049d2:	f023 0307 	bic.w	r3, r3, #7
 80049d6:	3308      	adds	r3, #8
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	4433      	add	r3, r6
 80049de:	9309      	str	r3, [sp, #36]	; 0x24
 80049e0:	e767      	b.n	80048b2 <_svfiprintf_r+0x4e>
 80049e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e6:	460c      	mov	r4, r1
 80049e8:	2001      	movs	r0, #1
 80049ea:	e7a5      	b.n	8004938 <_svfiprintf_r+0xd4>
 80049ec:	2300      	movs	r3, #0
 80049ee:	3401      	adds	r4, #1
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0c0a 	mov.w	ip, #10
 80049f8:	4620      	mov	r0, r4
 80049fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049fe:	3a30      	subs	r2, #48	; 0x30
 8004a00:	2a09      	cmp	r2, #9
 8004a02:	d903      	bls.n	8004a0c <_svfiprintf_r+0x1a8>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0c5      	beq.n	8004994 <_svfiprintf_r+0x130>
 8004a08:	9105      	str	r1, [sp, #20]
 8004a0a:	e7c3      	b.n	8004994 <_svfiprintf_r+0x130>
 8004a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a10:	4604      	mov	r4, r0
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f0      	b.n	80049f8 <_svfiprintf_r+0x194>
 8004a16:	ab03      	add	r3, sp, #12
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <_svfiprintf_r+0x1f8>)
 8004a1e:	a904      	add	r1, sp, #16
 8004a20:	4638      	mov	r0, r7
 8004a22:	f3af 8000 	nop.w
 8004a26:	1c42      	adds	r2, r0, #1
 8004a28:	4606      	mov	r6, r0
 8004a2a:	d1d6      	bne.n	80049da <_svfiprintf_r+0x176>
 8004a2c:	89ab      	ldrh	r3, [r5, #12]
 8004a2e:	065b      	lsls	r3, r3, #25
 8004a30:	f53f af2c 	bmi.w	800488c <_svfiprintf_r+0x28>
 8004a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a36:	b01d      	add	sp, #116	; 0x74
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	ab03      	add	r3, sp, #12
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	462a      	mov	r2, r5
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <_svfiprintf_r+0x1f8>)
 8004a44:	a904      	add	r1, sp, #16
 8004a46:	4638      	mov	r0, r7
 8004a48:	f000 f87a 	bl	8004b40 <_printf_i>
 8004a4c:	e7eb      	b.n	8004a26 <_svfiprintf_r+0x1c2>
 8004a4e:	bf00      	nop
 8004a50:	080051fc 	.word	0x080051fc
 8004a54:	08005206 	.word	0x08005206
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	080047ad 	.word	0x080047ad
 8004a60:	08005202 	.word	0x08005202

08004a64 <_printf_common>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4616      	mov	r6, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a74:	4293      	cmp	r3, r2
 8004a76:	bfb8      	it	lt
 8004a78:	4613      	movlt	r3, r2
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a80:	4607      	mov	r7, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	b10a      	cbz	r2, 8004a8a <_printf_common+0x26>
 8004a86:	3301      	adds	r3, #1
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	6833      	ldrmi	r3, [r6, #0]
 8004a92:	3302      	addmi	r3, #2
 8004a94:	6033      	strmi	r3, [r6, #0]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d106      	bne.n	8004aac <_printf_common+0x48>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	6832      	ldr	r2, [r6, #0]
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dc26      	bgt.n	8004afa <_printf_common+0x96>
 8004aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab0:	1e13      	subs	r3, r2, #0
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	0692      	lsls	r2, r2, #26
 8004aba:	d42b      	bmi.n	8004b14 <_printf_common+0xb0>
 8004abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	47c0      	blx	r8
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d01e      	beq.n	8004b08 <_printf_common+0xa4>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	68e5      	ldr	r5, [r4, #12]
 8004ace:	6832      	ldr	r2, [r6, #0]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	2600      	movs	r6, #0
 8004af0:	341a      	adds	r4, #26
 8004af2:	42b5      	cmp	r5, r6
 8004af4:	d11a      	bne.n	8004b2c <_printf_common+0xc8>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e008      	b.n	8004b0c <_printf_common+0xa8>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4649      	mov	r1, r9
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d103      	bne.n	8004b10 <_printf_common+0xac>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7c6      	b.n	8004aa2 <_printf_common+0x3e>
 8004b14:	18e1      	adds	r1, r4, r3
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	2030      	movs	r0, #48	; 0x30
 8004b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1e:	4422      	add	r2, r4
 8004b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b28:	3302      	adds	r3, #2
 8004b2a:	e7c7      	b.n	8004abc <_printf_common+0x58>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0e6      	beq.n	8004b08 <_printf_common+0xa4>
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7d9      	b.n	8004af2 <_printf_common+0x8e>
	...

08004b40 <_printf_i>:
 8004b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	4691      	mov	r9, r2
 8004b48:	7e27      	ldrb	r7, [r4, #24]
 8004b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b4c:	2f78      	cmp	r7, #120	; 0x78
 8004b4e:	4680      	mov	r8, r0
 8004b50:	469a      	mov	sl, r3
 8004b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b56:	d807      	bhi.n	8004b68 <_printf_i+0x28>
 8004b58:	2f62      	cmp	r7, #98	; 0x62
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x32>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f000 80d8 	beq.w	8004d12 <_printf_i+0x1d2>
 8004b62:	2f58      	cmp	r7, #88	; 0x58
 8004b64:	f000 80a3 	beq.w	8004cae <_printf_i+0x16e>
 8004b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b70:	e03a      	b.n	8004be8 <_printf_i+0xa8>
 8004b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b76:	2b15      	cmp	r3, #21
 8004b78:	d8f6      	bhi.n	8004b68 <_printf_i+0x28>
 8004b7a:	a001      	add	r0, pc, #4	; (adr r0, 8004b80 <_printf_i+0x40>)
 8004b7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004b69 	.word	0x08004b69
 8004b8c:	08004b69 	.word	0x08004b69
 8004b90:	08004b69 	.word	0x08004b69
 8004b94:	08004b69 	.word	0x08004b69
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b69 	.word	0x08004b69
 8004ba0:	08004b69 	.word	0x08004b69
 8004ba4:	08004b69 	.word	0x08004b69
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08004cf9 	.word	0x08004cf9
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004cdb 	.word	0x08004cdb
 8004bb8:	08004b69 	.word	0x08004b69
 8004bbc:	08004b69 	.word	0x08004b69
 8004bc0:	08004d1b 	.word	0x08004d1b
 8004bc4:	08004b69 	.word	0x08004b69
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b69 	.word	0x08004b69
 8004bd0:	08004b69 	.word	0x08004b69
 8004bd4:	08004ce3 	.word	0x08004ce3
 8004bd8:	680b      	ldr	r3, [r1, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	600a      	str	r2, [r1, #0]
 8004be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a3      	b.n	8004d34 <_printf_i+0x1f4>
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	6808      	ldr	r0, [r1, #0]
 8004bf0:	062e      	lsls	r6, r5, #24
 8004bf2:	f100 0304 	add.w	r3, r0, #4
 8004bf6:	d50a      	bpl.n	8004c0e <_printf_i+0xce>
 8004bf8:	6805      	ldr	r5, [r0, #0]
 8004bfa:	600b      	str	r3, [r1, #0]
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xc8>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	426d      	negs	r5, r5
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c08:	485e      	ldr	r0, [pc, #376]	; (8004d84 <_printf_i+0x244>)
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e019      	b.n	8004c42 <_printf_i+0x102>
 8004c0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c12:	6805      	ldr	r5, [r0, #0]
 8004c14:	600b      	str	r3, [r1, #0]
 8004c16:	bf18      	it	ne
 8004c18:	b22d      	sxthne	r5, r5
 8004c1a:	e7ef      	b.n	8004bfc <_printf_i+0xbc>
 8004c1c:	680b      	ldr	r3, [r1, #0]
 8004c1e:	6825      	ldr	r5, [r4, #0]
 8004c20:	1d18      	adds	r0, r3, #4
 8004c22:	6008      	str	r0, [r1, #0]
 8004c24:	0628      	lsls	r0, r5, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xec>
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xf2>
 8004c2c:	0669      	lsls	r1, r5, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe8>
 8004c30:	881d      	ldrh	r5, [r3, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_printf_i+0x244>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6866      	ldr	r6, [r4, #4]
 8004c44:	60a6      	str	r6, [r4, #8]
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90d      	cbnz	r5, 8004c58 <_printf_i+0x118>
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	d04d      	beq.n	8004cf4 <_printf_i+0x1b4>
 8004c58:	4616      	mov	r6, r2
 8004c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c68:	462f      	mov	r7, r5
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x11a>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x14c>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07df      	lsls	r7, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x14c>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c8c:	1b92      	subs	r2, r2, r6
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee2 	bl	8004a64 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14c      	bne.n	8004d3e <_printf_i+0x1fe>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	4835      	ldr	r0, [pc, #212]	; (8004d84 <_printf_i+0x244>)
 8004cb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	680e      	ldr	r6, [r1, #0]
 8004cb8:	061f      	lsls	r7, r3, #24
 8004cba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cbe:	600e      	str	r6, [r1, #0]
 8004cc0:	d514      	bpl.n	8004cec <_printf_i+0x1ac>
 8004cc2:	07d9      	lsls	r1, r3, #31
 8004cc4:	bf44      	itt	mi
 8004cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cca:	6023      	strmi	r3, [r4, #0]
 8004ccc:	b91d      	cbnz	r5, 8004cd6 <_printf_i+0x196>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f023 0320 	bic.w	r3, r3, #32
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	e7b0      	b.n	8004c3c <_printf_i+0xfc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	2378      	movs	r3, #120	; 0x78
 8004ce4:	4828      	ldr	r0, [pc, #160]	; (8004d88 <_printf_i+0x248>)
 8004ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cea:	e7e3      	b.n	8004cb4 <_printf_i+0x174>
 8004cec:	065e      	lsls	r6, r3, #25
 8004cee:	bf48      	it	mi
 8004cf0:	b2ad      	uxthmi	r5, r5
 8004cf2:	e7e6      	b.n	8004cc2 <_printf_i+0x182>
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	e7bb      	b.n	8004c70 <_printf_i+0x130>
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	6826      	ldr	r6, [r4, #0]
 8004cfc:	6960      	ldr	r0, [r4, #20]
 8004cfe:	1d1d      	adds	r5, r3, #4
 8004d00:	600d      	str	r5, [r1, #0]
 8004d02:	0635      	lsls	r5, r6, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1cc>
 8004d08:	6018      	str	r0, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1d2>
 8004d0c:	0671      	lsls	r1, r6, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x1c8>
 8004d10:	8018      	strh	r0, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	4616      	mov	r6, r2
 8004d18:	e7ba      	b.n	8004c90 <_printf_i+0x150>
 8004d1a:	680b      	ldr	r3, [r1, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	600a      	str	r2, [r1, #0]
 8004d20:	681e      	ldr	r6, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7fb fa5a 	bl	80001e0 <memchr>
 8004d2c:	b108      	cbz	r0, 8004d32 <_printf_i+0x1f2>
 8004d2e:	1b80      	subs	r0, r0, r6
 8004d30:	6060      	str	r0, [r4, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3c:	e7a8      	b.n	8004c90 <_printf_i+0x150>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0ab      	beq.n	8004ca4 <_printf_i+0x164>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d413      	bmi.n	8004d7a <_printf_i+0x23a>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e7a4      	b.n	8004ca8 <_printf_i+0x168>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d09b      	beq.n	8004ca4 <_printf_i+0x164>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dcf2      	bgt.n	8004d5e <_printf_i+0x21e>
 8004d78:	e7eb      	b.n	8004d52 <_printf_i+0x212>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	f104 0619 	add.w	r6, r4, #25
 8004d80:	e7f5      	b.n	8004d6e <_printf_i+0x22e>
 8004d82:	bf00      	nop
 8004d84:	0800520d 	.word	0x0800520d
 8004d88:	0800521e 	.word	0x0800521e

08004d8c <memmove>:
 8004d8c:	4288      	cmp	r0, r1
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	eb01 0402 	add.w	r4, r1, r2
 8004d94:	d902      	bls.n	8004d9c <memmove+0x10>
 8004d96:	4284      	cmp	r4, r0
 8004d98:	4623      	mov	r3, r4
 8004d9a:	d807      	bhi.n	8004dac <memmove+0x20>
 8004d9c:	1e43      	subs	r3, r0, #1
 8004d9e:	42a1      	cmp	r1, r4
 8004da0:	d008      	beq.n	8004db4 <memmove+0x28>
 8004da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004daa:	e7f8      	b.n	8004d9e <memmove+0x12>
 8004dac:	4402      	add	r2, r0
 8004dae:	4601      	mov	r1, r0
 8004db0:	428a      	cmp	r2, r1
 8004db2:	d100      	bne.n	8004db6 <memmove+0x2a>
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dbe:	e7f7      	b.n	8004db0 <memmove+0x24>

08004dc0 <_free_r>:
 8004dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d048      	beq.n	8004e58 <_free_r+0x98>
 8004dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dca:	9001      	str	r0, [sp, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f1a1 0404 	sub.w	r4, r1, #4
 8004dd2:	bfb8      	it	lt
 8004dd4:	18e4      	addlt	r4, r4, r3
 8004dd6:	f000 f8d3 	bl	8004f80 <__malloc_lock>
 8004dda:	4a20      	ldr	r2, [pc, #128]	; (8004e5c <_free_r+0x9c>)
 8004ddc:	9801      	ldr	r0, [sp, #4]
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	4615      	mov	r5, r2
 8004de2:	b933      	cbnz	r3, 8004df2 <_free_r+0x32>
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	6014      	str	r4, [r2, #0]
 8004de8:	b003      	add	sp, #12
 8004dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dee:	f000 b8cd 	b.w	8004f8c <__malloc_unlock>
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	d90b      	bls.n	8004e0e <_free_r+0x4e>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	1862      	adds	r2, r4, r1
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bf04      	itt	eq
 8004dfe:	681a      	ldreq	r2, [r3, #0]
 8004e00:	685b      	ldreq	r3, [r3, #4]
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	bf04      	itt	eq
 8004e06:	1852      	addeq	r2, r2, r1
 8004e08:	6022      	streq	r2, [r4, #0]
 8004e0a:	602c      	str	r4, [r5, #0]
 8004e0c:	e7ec      	b.n	8004de8 <_free_r+0x28>
 8004e0e:	461a      	mov	r2, r3
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	b10b      	cbz	r3, 8004e18 <_free_r+0x58>
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d9fa      	bls.n	8004e0e <_free_r+0x4e>
 8004e18:	6811      	ldr	r1, [r2, #0]
 8004e1a:	1855      	adds	r5, r2, r1
 8004e1c:	42a5      	cmp	r5, r4
 8004e1e:	d10b      	bne.n	8004e38 <_free_r+0x78>
 8004e20:	6824      	ldr	r4, [r4, #0]
 8004e22:	4421      	add	r1, r4
 8004e24:	1854      	adds	r4, r2, r1
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	6011      	str	r1, [r2, #0]
 8004e2a:	d1dd      	bne.n	8004de8 <_free_r+0x28>
 8004e2c:	681c      	ldr	r4, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	6053      	str	r3, [r2, #4]
 8004e32:	4421      	add	r1, r4
 8004e34:	6011      	str	r1, [r2, #0]
 8004e36:	e7d7      	b.n	8004de8 <_free_r+0x28>
 8004e38:	d902      	bls.n	8004e40 <_free_r+0x80>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	6003      	str	r3, [r0, #0]
 8004e3e:	e7d3      	b.n	8004de8 <_free_r+0x28>
 8004e40:	6825      	ldr	r5, [r4, #0]
 8004e42:	1961      	adds	r1, r4, r5
 8004e44:	428b      	cmp	r3, r1
 8004e46:	bf04      	itt	eq
 8004e48:	6819      	ldreq	r1, [r3, #0]
 8004e4a:	685b      	ldreq	r3, [r3, #4]
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	bf04      	itt	eq
 8004e50:	1949      	addeq	r1, r1, r5
 8004e52:	6021      	streq	r1, [r4, #0]
 8004e54:	6054      	str	r4, [r2, #4]
 8004e56:	e7c7      	b.n	8004de8 <_free_r+0x28>
 8004e58:	b003      	add	sp, #12
 8004e5a:	bd30      	pop	{r4, r5, pc}
 8004e5c:	2000403c 	.word	0x2000403c

08004e60 <_malloc_r>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	1ccd      	adds	r5, r1, #3
 8004e64:	f025 0503 	bic.w	r5, r5, #3
 8004e68:	3508      	adds	r5, #8
 8004e6a:	2d0c      	cmp	r5, #12
 8004e6c:	bf38      	it	cc
 8004e6e:	250c      	movcc	r5, #12
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	4606      	mov	r6, r0
 8004e74:	db01      	blt.n	8004e7a <_malloc_r+0x1a>
 8004e76:	42a9      	cmp	r1, r5
 8004e78:	d903      	bls.n	8004e82 <_malloc_r+0x22>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	2000      	movs	r0, #0
 8004e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e82:	f000 f87d 	bl	8004f80 <__malloc_lock>
 8004e86:	4921      	ldr	r1, [pc, #132]	; (8004f0c <_malloc_r+0xac>)
 8004e88:	680a      	ldr	r2, [r1, #0]
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	b99c      	cbnz	r4, 8004eb6 <_malloc_r+0x56>
 8004e8e:	4f20      	ldr	r7, [pc, #128]	; (8004f10 <_malloc_r+0xb0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b923      	cbnz	r3, 8004e9e <_malloc_r+0x3e>
 8004e94:	4621      	mov	r1, r4
 8004e96:	4630      	mov	r0, r6
 8004e98:	f000 f862 	bl	8004f60 <_sbrk_r>
 8004e9c:	6038      	str	r0, [r7, #0]
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f85d 	bl	8004f60 <_sbrk_r>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	d123      	bne.n	8004ef2 <_malloc_r+0x92>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f000 f86c 	bl	8004f8c <__malloc_unlock>
 8004eb4:	e7e3      	b.n	8004e7e <_malloc_r+0x1e>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	1b5b      	subs	r3, r3, r5
 8004eba:	d417      	bmi.n	8004eec <_malloc_r+0x8c>
 8004ebc:	2b0b      	cmp	r3, #11
 8004ebe:	d903      	bls.n	8004ec8 <_malloc_r+0x68>
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	441c      	add	r4, r3
 8004ec4:	6025      	str	r5, [r4, #0]
 8004ec6:	e004      	b.n	8004ed2 <_malloc_r+0x72>
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	42a2      	cmp	r2, r4
 8004ecc:	bf0c      	ite	eq
 8004ece:	600b      	streq	r3, [r1, #0]
 8004ed0:	6053      	strne	r3, [r2, #4]
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f000 f85a 	bl	8004f8c <__malloc_unlock>
 8004ed8:	f104 000b 	add.w	r0, r4, #11
 8004edc:	1d23      	adds	r3, r4, #4
 8004ede:	f020 0007 	bic.w	r0, r0, #7
 8004ee2:	1ac2      	subs	r2, r0, r3
 8004ee4:	d0cc      	beq.n	8004e80 <_malloc_r+0x20>
 8004ee6:	1a1b      	subs	r3, r3, r0
 8004ee8:	50a3      	str	r3, [r4, r2]
 8004eea:	e7c9      	b.n	8004e80 <_malloc_r+0x20>
 8004eec:	4622      	mov	r2, r4
 8004eee:	6864      	ldr	r4, [r4, #4]
 8004ef0:	e7cc      	b.n	8004e8c <_malloc_r+0x2c>
 8004ef2:	1cc4      	adds	r4, r0, #3
 8004ef4:	f024 0403 	bic.w	r4, r4, #3
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d0e3      	beq.n	8004ec4 <_malloc_r+0x64>
 8004efc:	1a21      	subs	r1, r4, r0
 8004efe:	4630      	mov	r0, r6
 8004f00:	f000 f82e 	bl	8004f60 <_sbrk_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d1dd      	bne.n	8004ec4 <_malloc_r+0x64>
 8004f08:	e7cf      	b.n	8004eaa <_malloc_r+0x4a>
 8004f0a:	bf00      	nop
 8004f0c:	2000403c 	.word	0x2000403c
 8004f10:	20004040 	.word	0x20004040

08004f14 <_realloc_r>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	4607      	mov	r7, r0
 8004f18:	4614      	mov	r4, r2
 8004f1a:	460e      	mov	r6, r1
 8004f1c:	b921      	cbnz	r1, 8004f28 <_realloc_r+0x14>
 8004f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f22:	4611      	mov	r1, r2
 8004f24:	f7ff bf9c 	b.w	8004e60 <_malloc_r>
 8004f28:	b922      	cbnz	r2, 8004f34 <_realloc_r+0x20>
 8004f2a:	f7ff ff49 	bl	8004dc0 <_free_r>
 8004f2e:	4625      	mov	r5, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f34:	f000 f830 	bl	8004f98 <_malloc_usable_size_r>
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d20f      	bcs.n	8004f5c <_realloc_r+0x48>
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4638      	mov	r0, r7
 8004f40:	f7ff ff8e 	bl	8004e60 <_malloc_r>
 8004f44:	4605      	mov	r5, r0
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d0f2      	beq.n	8004f30 <_realloc_r+0x1c>
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	f7ff fbf7 	bl	8004740 <memcpy>
 8004f52:	4631      	mov	r1, r6
 8004f54:	4638      	mov	r0, r7
 8004f56:	f7ff ff33 	bl	8004dc0 <_free_r>
 8004f5a:	e7e9      	b.n	8004f30 <_realloc_r+0x1c>
 8004f5c:	4635      	mov	r5, r6
 8004f5e:	e7e7      	b.n	8004f30 <_realloc_r+0x1c>

08004f60 <_sbrk_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d06      	ldr	r5, [pc, #24]	; (8004f7c <_sbrk_r+0x1c>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	4604      	mov	r4, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fb fdb0 	bl	8000ad0 <_sbrk>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_sbrk_r+0x1a>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_sbrk_r+0x1a>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	200040e4 	.word	0x200040e4

08004f80 <__malloc_lock>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__malloc_lock+0x8>)
 8004f82:	f000 b811 	b.w	8004fa8 <__retarget_lock_acquire_recursive>
 8004f86:	bf00      	nop
 8004f88:	200040ec 	.word	0x200040ec

08004f8c <__malloc_unlock>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <__malloc_unlock+0x8>)
 8004f8e:	f000 b80c 	b.w	8004faa <__retarget_lock_release_recursive>
 8004f92:	bf00      	nop
 8004f94:	200040ec 	.word	0x200040ec

08004f98 <_malloc_usable_size_r>:
 8004f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9c:	1f18      	subs	r0, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfbc      	itt	lt
 8004fa2:	580b      	ldrlt	r3, [r1, r0]
 8004fa4:	18c0      	addlt	r0, r0, r3
 8004fa6:	4770      	bx	lr

08004fa8 <__retarget_lock_acquire_recursive>:
 8004fa8:	4770      	bx	lr

08004faa <__retarget_lock_release_recursive>:
 8004faa:	4770      	bx	lr

08004fac <_init>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr

08004fb8 <_fini>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr
